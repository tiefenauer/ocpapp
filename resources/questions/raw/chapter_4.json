{
  "id": "392275",
  "title": null,
  "user_id": "14161",
  "course_id": "823",
  "test_id": "123",
  "section_id": null,
  "mode": "practice",
  "date_created": "2016-10-07 02:43:37",
  "lesson_location": "0",
  "status": "1",
  "category": "Book 9781119067900",
  "course_name": "OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide: <br\/>Exam 1Z0-809",
  "global_time": 0,
  "sections": {
    "directions": [{
      "id": "987",
      "test_id": "123",
      "description": "Chapter 4",
      "time": "20",
      "direction": [{
        "id": "977",
        "reference_id": "987",
        "direction_for": "section",
        "data_type_id": "2",
        "data": "Section level Directions Text appears here.",
        "display_order": "0"
      }]
    }],
    "question": [{
      "id": "34161",
      "attempts_id": "392275",
      "question_id": "34161",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following?<br><br><span class=\"dCode dNoWrap\">Stream&#60;String&#62;&#160;stream&#160;=&#160;Stream.iterate(\"\",&#160;(s)&#160;-&#62;&#160;s&#160;+&#160;\"1\");<\/span><br><span class=\"dCode dNoWrap\">System.out.println(stream.limit(2).map(x&#160;-&#62;&#160;x&#160;+&#160;\"2\"));<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">12112<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">212<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">212112<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">java.util.stream.ReferencePipeline$3@4517d9a3<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "An exception is thrown.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code hangs.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "No terminal operation is called, so the stream never executes. The methods chain to create a stream that would contain \"2\" and \"12.\" The first line creates an infinite stream. The second line would get the first two elements from that infinite stream and map each element to add an extra character.",
        "display_order": "1"
      }]
    }, {
      "id": "34162",
      "attempts_id": "392275",
      "question_id": "34162",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following?<br><br><span class=\"dCode dNoWrap\">Predicate&#60;?&#160;super&#160;String&#62;&#160;predicate&#160;=&#160;s&#160;-&#62;&#160;s.startsWith(\"g\");<\/span><br><span class=\"dCode dNoWrap\">Stream&#60;String&#62;&#160;stream1&#160;=&#160;Stream.<i>generate<\/i>(()&#160;-&#62;&#160;\"growl!&#160;\");<\/span><br><span class=\"dCode dNoWrap\">Stream&#60;String&#62;&#160;stream2&#160;=&#160;Stream.<i>generate<\/i>(()&#160;-&#62;&#160;\"growl!&#160;\");<\/span><br><span class=\"dCode dNoWrap\">boolean&#160;b1&#160;=&#160;stream1.anyMatch(predicate);<\/span><br><span class=\"dCode dNoWrap\">boolean&#160;b2&#160;=&#160;stream2.allMatch(predicate);<\/span><br><span class=\"dCode dNoWrap\">System.out.println(b1&#160;+&#160;\"&#160;\"&#160;+&#160;b2);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">true&#160;false<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">true&#160;true<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">java.util.stream.ReferencePipeline$3@4517d9a3<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "An exception is thrown.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code hangs.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">b1<\/span> is set to <span class=\"dCode dNoWrap\">true<\/span> since <span class=\"dCode dNoWrap\">anyMatch()<\/span> terminates. Even though the stream is infinite, Java finds a match on the first element and stops looking. However, when <span class=\"dCode dNoWrap\">allMatch()<\/span> runs, it needs to keep going until the end of the stream since it keeps finding matches. Since all elements continue to match, the program hangs.",
        "display_order": "1"
      }]
    }, {
      "id": "34163",
      "attempts_id": "392275",
      "question_id": "34163",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following?<br><br><span class=\"dCode dNoWrap\">Predicate&#60;?&#160;super&#160;String&#62;&#160;predicate&#160;=&#160;s&#160;-&#62;&#160;s.length()&#160;&#62;&#160;3;<\/span><br><span class=\"dCode dNoWrap\">Stream&#60;String&#62;&#160;stream&#160;=&#160;Stream.iterate(\"-\",&#160;(s)&#160;-&#62;&#160;s&#160;+&#160;s);<\/span><br><span class=\"dCode dNoWrap\">boolean&#160;b1&#160;=&#160;stream.noneMatch(predicate);<\/span><br><span class=\"dCode dNoWrap\">boolean&#160;b2&#160;=&#160;stream.anyMatch(predicate);<\/span><br><span class=\"dCode dNoWrap\">System.out.println(b1&#160;+&#160;\"&#160;\"&#160;+&#160;b2);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">false&#160;true<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">false&#160;false<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">java.util.stream.ReferencePipeline$3@4517d9a3<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "An exception is thrown.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code hangs.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "An infinite stream is generated where each element is twice as long as the previous one. <span class=\"dCode dNoWrap\">b1<\/span> is set to <span class=\"dCode dNoWrap\">false<\/span> because Java finds an element that doesn't match when it gets to the element of length <span class=\"dCode dNoWrap\">4<\/span>. However, the next line tries to operate on the same stream. Since streams can be used only once, this throws an exception that the \"stream has already been operated upon or closed.\" If two different streams were used, the result would be option A.",
        "display_order": "1"
      }]
    }, {
      "id": "34164",
      "attempts_id": "392275",
      "question_id": "34164",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which are true statements about terminal operations in a stream? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "At most one terminal operation can exist in a stream pipeline.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "Terminal operations are a required part of the stream pipeline in order to get a result.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "Terminal operations have <span class=\"dCode dNoWrap\">Stream<\/span> as the return type.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The referenced <span class=\"dCode dNoWrap\">Stream<\/span> may be used after the calling a terminal operation.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The <span class=\"dCode dNoWrap\">peek()<\/span> method is an example of a terminal operation.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Terminal operations are the final step in a stream pipeline. Exactly one is required, because it triggers the execution of the entire stream pipeline. Therefore, options A and B are correct. Options C and F are true of intermediate operations rather than terminal operations. Option E is never true. Once a stream pipeline is run, the <span class=\"dCode dNoWrap\">Stream<\/span> is marked invalid.",
        "display_order": "1"
      }]
    }, {
      "id": "34165",
      "attempts_id": "392275",
      "question_id": "34165",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which terminal operations on the <span class=\"dCode dNoWrap\">Stream<\/span> class are reductions? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">collect()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">count()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">findFirst()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">map()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">peek()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">sum()<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Options D and E are incorrect because they are intermediate operations and not terminal operations. While option F is a reduction, it is incorrect because it is available only on primitive streams such as <span class=\"dCode dNoWrap\">IntStream<\/span>. Option C is incorrect because it is not a reduction&#8212;it does not look at each element in the stream.",
        "display_order": "1"
      }]
    }, {
      "id": "34166",
      "attempts_id": "392275",
      "question_id": "34166",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following can fill in the blank so that the code prints out <span class=\"dCode dNoWrap\">false<\/span>? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">Stream&#60;String&#62;&#160;s&#160;=&#160;Stream.generate(()&#160;-&#62;&#160;\"meow\");<\/span><br><span class=\"dCode dNoWrap\">boolean&#160;match&#160;=&#160;s.___________(String::isEmpty);<\/span><br><span class=\"dCode dNoWrap\">System.out.println(match);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">allMatch<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">anyMatch<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">findAny<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">findFirst<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">noneMatch<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "None of the above",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Options C and D are incorrect because these methods do not take a <span class=\"dCode dNoWrap\">Predicate<\/span> parameter and do not return a <span class=\"dCode dNoWrap\">boolean<\/span>. Options B and E are incorrect because they cause the code to run infinitely. The stream has no way to know that a match won't show up later. Option A is correct because it is safe to return <span class=\"dCode dNoWrap\">false<\/span> as soon as one element passes through the stream that doesn't match.",
        "display_order": "1"
      }]
    }, {
      "id": "34167",
      "attempts_id": "392275",
      "question_id": "34167",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "We have a method that returns a sorted list without changing the original. Which of the following can replace the method implementation to do the same with streams?<br><br><span class=\"dCode dNoWrap\">private&#160;static&#160;List&#60;String&#62;&#160;sort(List&#60;String&#62;&#160;list)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;List&#60;String&#62;&#160;copy&#160;=&#160;new&#160;ArrayList&#60;&#62;(list);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;Collections.sort(copy,&#160;(a,&#160;b)&#160;-&#62;&#160;b.compareTo(a));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;return&#160;copy;<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">return&#160;list.stream()<\/span><br><span class=\"dCode dNoWrap\">.compare((a,&#160;b)&#160;-&#62;&#160;b.compareTo(a))<\/span><br><span class=\"dCode dNoWrap\">.collect(Collectors.toList());<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">return&#160;list.stream()<\/span><br><span class=\"dCode dNoWrap\">.compare((a,&#160;b)&#160;-&#62;&#160;b.compareTo(a))<\/span><br><span class=\"dCode dNoWrap\">.sort();<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">return&#160;list.stream()<\/span><br><span class=\"dCode dNoWrap\">.compareTo((a,&#160;b)&#160;-&#62;&#160;b.compareTo(a))<\/span><br><span class=\"dCode dNoWrap\">.collect(Collectors.toList());<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">return&#160;list.stream()<\/span><br><span class=\"dCode dNoWrap\">.compareTo((a,&#160;b)&#160;-&#62;&#160;b.compareTo(a))<\/span><br><span class=\"dCode dNoWrap\">.sort();<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">return&#160;list.stream()<\/span><br><span class=\"dCode dNoWrap\">.sorted((a,&#160;b)&#160;-&#62;&#160;b.compareTo(a))<\/span><br><span class=\"dCode dNoWrap\">.collect();<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">return&#160;list.stream()<\/span><br><span class=\"dCode dNoWrap\">.sorted((a,&#160;b)&#160;-&#62;&#160;b.compareTo(a))<\/span><br><span class=\"dCode dNoWrap\">.collect(Collectors.toList());<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The <span class=\"dCode dNoWrap\">sorted()<\/span> method is used in a stream pipeline to return a sorted <span class=\"dCode dNoWrap\">Stream<\/span>. A collector is needed to turn the stream back into a <span class=\"dCode dNoWrap\">List<\/span>. The <span class=\"dCode dNoWrap\">collect()<\/span> method takes the desired collector.",
        "display_order": "1"
      }]
    }, {
      "id": "34168",
      "attempts_id": "392275",
      "question_id": "34168",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "4;5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following are true given the declaration <span class=\"dCode dNoWrap\">IntStream&#160;is&#160;=&#160;IntStream.empty()<\/span>? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">is.average()<\/span> returns the type <span class=\"dCode dNoWrap\">int<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">is.average()<\/span> returns the type <span class=\"dCode dNoWrap\">OptionalInt<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">is.findAny()<\/span> returns the type <span class=\"dCode dNoWrap\">int<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">is.findAny()<\/span> returns the type <span class=\"dCode dNoWrap\">OptionalInt<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">is.sum()<\/span> returns the type <span class=\"dCode dNoWrap\">int<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">is.sum()<\/span> returns the type <span class=\"dCode dNoWrap\">OptionalInt<\/span>.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The <span class=\"dCode dNoWrap\">sum()<\/span> method returns an <span class=\"dCode dNoWrap\">int<\/span> rather than an <span class=\"dCode dNoWrap\">OptionalInt<\/span> because the sum of an empty list is zero. Therefore, option E is correct. The <span class=\"dCode dNoWrap\">findAny()<\/span> method returns an <span class=\"dCode dNoWrap\">OptionalInt<\/span> because there might not be any elements to find. Therefore, option D is correct. The <span class=\"dCode dNoWrap\">average()<\/span> method returns an <span class=\"dCode dNoWrap\">OptionalDouble<\/span> since averages of any type can result in a fraction. Therefore, options A and B are both incorrect.",
        "display_order": "1"
      }]
    }, {
      "id": "34169",
      "attempts_id": "392275",
      "question_id": "34169",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following can we add after line 5 for the code to run without error and not produce any output? (Choose all that apply.)<br><br><span class=\"dSmall\"><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;LongStream&#160;ls&#160;=&#160;LongStream.of(1,&#160;2,&#160;3);<\/span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;OptionalLong&#160;opt&#160;=&#160;ls.map(n&#160;-&#62;&#160;n&#160;*&#160;10).filter(n&#160;-&#62;&#160;n&#160;&#60;&#160;5).findFirst();<\/span><\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">if&#160;(opt.isPresent())&#160;System.out.println(opt.get());<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">if&#160;(opt.isPresent())&#160;System.out.println(opt.getAsLong());<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">opt.ifPresent(System.out.println)<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">opt.ifPresent(System.out::println)<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "None of these; the code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "None of these; line 5 throws an exception at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Option A would work for a regular <span class=\"dCode dNoWrap\">Stream<\/span>. However, we have a <span class=\"dCode dNoWrap\">LongStream<\/span> and therefore need to call <span class=\"dCode dNoWrap\">getAsLong()<\/span>. Option C is missing the <span class=\"dCode dNoWrap\">::<\/span> that would make it a method reference. Therefore, options B and D are correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34170",
      "attempts_id": "392275",
      "question_id": "34170",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Select from the following statements and indicate the order in which they would appear to output 10 lines:<br><br><span class=\"dCode dNoWrap\">Stream.generate(()&#160;-&#62;&#160;\"1\")<\/span><br><span class=\"dCode dNoWrap\">L:&#160;&#160;.filter(x&#160;-&#62;&#160;x.length()&#160;&#62;&#160;1)<\/span><br><span class=\"dCode dNoWrap\">M:&#160;&#160;.forEach(System.out::println)<\/span><br><span class=\"dCode dNoWrap\">N:&#160;&#160;.limit(10)<\/span><br><span class=\"dCode dNoWrap\">O:&#160;&#160;.peek(System.out::println)<\/span><br><span class=\"dCode dNoWrap\">;<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "L, N",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "L, N, O",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "L, N, M",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "L, N, M, O",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "L, O, M",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "N, M",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "N, O",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The terminal operation must be right before the semicolon, which is line M. Remember that <span class=\"dCode dNoWrap\">forEach()<\/span> is a terminal operation while <span class=\"dCode dNoWrap\">peek()<\/span> is an intermediate operation. This eliminates all but choices C, E, and F. Choice E is incorrect because there is no <span class=\"dCode dNoWrap\">limit()<\/span> operation, which means that the code would run infinitely. Choice C is incorrect because <span class=\"dCode dNoWrap\">filter()<\/span> is called before <span class=\"dCode dNoWrap\">limit()<\/span>. No elements make it through the filter, so the code also runs infinitely. Choice F is correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34171",
      "attempts_id": "392275",
      "question_id": "34171",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;3;5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What changes need to be made for this code to print the string <span class=\"dSmall\"><span class=\"dCode dNoWrap\">12345<\/span>? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">Stream.iterate(1,&#160;x&#160;-&#62;&#160;x++).limit(5).map(x&#160;-&#62;&#160;x).collect(Collectors.joining());<\/span><\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "Change <span class=\"dCode dNoWrap\">Collectors.joining()<\/span> to <span class=\"dCode dNoWrap\">Collectors.joining(\"\")<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "Change <span class=\"dCode dNoWrap\">map(x&#160;-&#62;&#160;x)<\/span> to <span class=\"dCode dNoWrap\">map(x&#160;-&#62;&#160;\"\"&#160;+&#160;x)<\/span> .",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "Change <span class=\"dCode dNoWrap\">x&#160;-&#62;&#160;x++<\/span> to <span class=\"dCode dNoWrap\">x&#160;-&#62;&#160;++x<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "Add <span class=\"dCode dNoWrap\">forEach(System.out::print)<\/span> after the call to <span class=\"dCode dNoWrap\">collect()<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "Wrap the entire line in a <span class=\"dCode dNoWrap\">System.out.print<\/span> statement.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "None of the above. The code already prints <span class=\"dCode dNoWrap\">12345<\/span>.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "As written, the code doesn't compile because the collector expects to get a <span class=\"dCode dNoWrap\">String<\/span> immediately before it in the chain. Option B fixes this, at which point nothing is output because the collector creates a <span class=\"dCode dNoWrap\">String<\/span>. Option E fixes this and causes the output to be <span class=\"dCode dNoWrap\">11111<\/span>. Since the post-increment operator is used, the stream contains an infinite number of <span class=\"dCode dNoWrap\">1<\/span>s. Option C fixes this and causes the stream to contain increasing numbers.",
        "display_order": "1"
      }]
    }, {
      "id": "34172",
      "attempts_id": "392275",
      "question_id": "34172",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;6;7",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which functional interfaces complete the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;________&#160;x&#160;=&#160;String::new;<\/span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;________&#160;y&#160;=&#160;(a,&#160;b)&#160;-&#62;&#160;System.out.println();<\/span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;________&#160;z&#160;=&#160;a&#160;-&#62;&#160;a&#160;+&#160;a;<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BiConsumer&#60;String,&#160;String&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BiFunction&#60;String,&#160;String&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BinaryConsumer&#60;String,&#160;String&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BinaryFunction&#60;String,&#160;String&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Consumer&#60;String&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Supplier&#60;String&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">UnaryOperator&#60;String&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "8",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">UnaryOperator&#60;String,&#160;String&#62;<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Line 6 doesn't take any parameters, and it returns a <span class=\"dCode dNoWrap\">String<\/span>, making it a <span class=\"dCode dNoWrap\">Supplier<\/span>. Another clue is that it uses a constructor reference, which should scream <span class=\"dCode dNoWrap\">Supplier<\/span>! This makes choice F correct. Line 7 takes two parameters, and it doesn't return anything making it a <span class=\"dCode dNoWrap\">BiConsumer<\/span>. The print statement should also be a clue that we are dealing with a <span class=\"dCode dNoWrap\">Consumer<\/span> or <span class=\"dCode dNoWrap\">BiConsumer<\/span>. This makes choice A correct. Choices C and D are there to mislead you; these interfaces don't actually exist. <span class=\"dCode dNoWrap\">BinaryOperator<\/span> spells out <i>binary<\/i>. The other functional interfaces use the prefix <span class=\"dCode dNoWrap\">Bi<\/span>. Finally, line 8 takes a single parameter, and it returns the same type, which is a <span class=\"dCode dNoWrap\">UnaryOperator<\/span>. Since the types are the same, only one generic is needed, making choice G correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34173",
      "attempts_id": "392275",
      "question_id": "34173",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following is true?<br><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;l1&#160;=&#160;Arrays.asList(1,&#160;2,&#160;3);<\/span><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;l2&#160;=&#160;Arrays.asList(4,&#160;5,&#160;6);<\/span><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;l3&#160;=&#160;Arrays.asList();<\/span><br><span class=\"dCode dNoWrap\">Stream.of(l1,&#160;l2,&#160;l3).map(x&#160;-&#62;&#160;x&#160;+&#160;1)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;.flatMap(x&#160;-&#62;&#160;x.stream()).forEach(System.out::print);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles and prints <span class=\"dCode dNoWrap\">123456<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles and prints <span class=\"dCode dNoWrap\">234567<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles but does not print anything.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles but prints stream references.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code runs infinitely.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code throws an exception",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "If the <span class=\"dCode dNoWrap\">map()<\/span> and <span class=\"dCode dNoWrap\">flatMap()<\/span> calls were reversed, choice B would be correct. In this case, the <span class=\"dCode dNoWrap\">Stream<\/span> created from the source is of type <span class=\"dCode dNoWrap\">Stream&#60;List&#60;Integer&#62;&#62;<\/span>. The <span class=\"dCode dNoWrap\">Function<\/span> in <span class=\"dCode dNoWrap\">map<\/span> expects an <span class=\"dCode dNoWrap\">Integer<\/span> rather than a <span class=\"dCode dNoWrap\">List&#60;Integer&#62;<\/span>, so the code does not compile.",
        "display_order": "1"
      }]
    }, {
      "id": "34174",
      "attempts_id": "392275",
      "question_id": "34174",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following is true?<br><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;Stream&#60;Integer&#62;&#160;s&#160;=&#160;Stream.of(1);<\/span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;IntStream&#160;is&#160;=&#160;s.mapToInt(x&#160;-&#62;&#160;x);<\/span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;DoubleStream&#160;ds&#160;=&#160;s.mapToDouble(x&#160;-&#62;&#160;x);<\/span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;Stream&#60;Integer&#62;&#160;s2&#160;=&#160;ds.mapToInt(x&#160;-&#62;&#160;x);<\/span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;&#160;s2.forEach(System.out::print);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "Line 4 does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "Line 5 does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "Line 6 does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "Line 7 does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "Line 8 does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code throws an exception.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles and prints <span class=\"dCode dNoWrap\">1<\/span>.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Line 4 should obviously look OK. It creates a <span class=\"dCode dNoWrap\">Stream<\/span> and uses autoboxing to put the <span class=\"dCode dNoWrap\">Integer<\/span> <span class=\"dCode dNoWrap\">1<\/span> inside. Line 5 converts to a primitive, again using autoboxing. Line 6 converts to a <span class=\"dCode dNoWrap\">double<\/span> primitive, which works since <span class=\"dCode dNoWrap\">double&#160;d&#160;=&#160;1;<\/span> would work. Line 7 is where it all falls apart. Converting from a <span class=\"dCode dNoWrap\">double&#160;<\/span>to an <span class=\"dCode dNoWrap\">int<\/span> would require a cast inside the lambda.",
        "display_order": "1"
      }]
    }, {
      "id": "34175",
      "attempts_id": "392275",
      "question_id": "34175",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "4;5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "The <span class=\"dCode dNoWrap\">partitioningBy()<\/span> collector creates a <span class=\"dCode dNoWrap\">Map&#60;Boolean,&#160;List&#60;String&#62;&#62;<\/span> when passed to <span class=\"dCode dNoWrap\">collect()<\/span> by default. When specific parameters are passed to <span class=\"dCode dNoWrap\">partitioningBy()<\/span>, which return types can be created? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Map&#60;boolean,&#160;List&#60;String&#62;&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Map&#60;Boolean,&#160;Map&#60;String&#62;&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Map&#60;Long,&#160;TreeSet&#60;String&#62;&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Map&#60;Boolean,&#160;List&#60;String&#62;&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Map&#60;Boolean,&#160;Set&#60;String&#62;&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "None of the above",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Choices A and B do not compile, because they are invalid generic declarations. Primitives are not allowed as generics, and <span class=\"dCode dNoWrap\">Map<\/span> must have two generic types. Choice C is incorrect because partitioning only gives a <span class=\"dCode dNoWrap\">Boolean<\/span> key. Choices D and E are correct because the result <span class=\"dCode dNoWrap\">Collection<\/span> can be customized.",
        "display_order": "1"
      }]
    }, {
      "id": "34176",
      "attempts_id": "392275",
      "question_id": "34176",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following?<br><br><span class=\"dCode dNoWrap\">Stream&#60;String&#62;&#160;s&#160;=&#160;Stream.empty();<\/span><br><span class=\"dCode dNoWrap\">Stream&#60;String&#62;&#160;s2&#160;=&#160;Stream.empty();<\/span><br><span class=\"dCode dNoWrap\">Map&#60;Boolean,&#160;List&#60;String&#62;&#62;&#160;p&#160;=&#160;s.collect(<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;Collectors.partitioningBy(b&#160;-&#62;&#160;b.startsWith(\"c\")));<\/span><br><span class=\"dCode dNoWrap\">Map&#60;Boolean,&#160;List&#60;String&#62;&#62;&#160;g&#160;=&#160;s2.collect(<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;Collectors.groupingBy(b&#160;-&#62;&#160;b.startsWith(\"c\")));<\/span><br><span class=\"dCode dNoWrap\">System.out.println(p&#160;+&#160;\"&#160;\"&#160;+&#160;g);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{}&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{}&#160;{false=[],&#160;true=[]}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{false=[],&#160;true=[]}&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{false=[],&#160;true=[]}&#160;{false=[],&#160;true=[]}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "An exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The <span class=\"dCode dNoWrap\">partitioningBy()<\/span> operation always returns a map with two <span class=\"dCode dNoWrap\">Boolean<\/span> keys, even if there are no corresponding values. By contrast, <span class=\"dCode dNoWrap\">groupingBy()<\/span> returns only keys that are actually needed.",
        "display_order": "1"
      }]
    }, {
      "id": "34177",
      "attempts_id": "392275",
      "question_id": "34177",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following is equivalent to this code?<br><br><span class=\"dCode dNoWrap\">UnaryOperator&#60;Integer&#62;&#160;u&#160;=&#160;x&#160;-&#62;&#160;x&#160;*&#160;x;<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BiFunction&#60;Integer&#62;&#160;f&#160;=&#160;x&#160;-&#62;&#160;x*x;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BiFunction&#60;Integer,&#160;Integer&#62;&#160;f&#160;=&#160;x&#160;-&#62;&#160;x*x;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BinaryOperator&#60;Integer,&#160;Integer&#62;&#160;f&#160;=&#160;x&#160;-&#62;&#160;x*x;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Function&#60;Integer&#62;&#160;f&#160;=&#160;x&#160;-&#62;&#160;x*x;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Function&#60;Integer,&#160;Integer&#62;&#160;f&#160;=&#160;x&#160;-&#62;&#160;x*x;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "None of the above",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "A <span class=\"dCode dNoWrap\">UnaryOperator<\/span> is a special type of function where the parameter and return type are the same. Therefore, option E is correct. Notice that other options don't even compile because they have the wrong number of generic types for the functional interface provided.",
        "display_order": "1"
      }]
    }, {
      "id": "34178",
      "attempts_id": "392275",
      "question_id": "34178",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of the following?<br><br><span class=\"dCode dNoWrap\">DoubleStream&#160;s&#160;=&#160;DoubleStream.of(1.2,&#160;2.4);<\/span><br><span class=\"dCode dNoWrap\">s.peek(System.out::println).filter(x&#160;-&#62;&#160;x&#160;&#62;&#160;2).count();<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">1<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2.4<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">1.2<\/span> and <span class=\"dCode dNoWrap\">2.4<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "There is no output.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "An exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The terminal operation is <span class=\"dCode dNoWrap\">count()<\/span>. Since there is a terminal operation, the intermediate operations run. The <span class=\"dCode dNoWrap\">peek()<\/span> operation comes before the filter, so both numbers are printed. The count happens to be <span class=\"dCode dNoWrap\">1<\/span> since the other number is filtered. However, the result of the stream pipeline isn't stored in a variable, and that result is ignored.",
        "display_order": "1"
      }]
    }, {
      "id": "34179",
      "attempts_id": "392275",
      "question_id": "34179",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;3;5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following return primitives? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BooleanSupplier<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">CharSupplier<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">DoubleSupplier<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">FloatSupplier<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">IntSupplier<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">StringSupplier<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The three common types of <span class=\"dCode dNoWrap\">double<\/span>, <span class=\"dCode dNoWrap\">int<\/span> and, <span class=\"dCode dNoWrap\">long<\/span> have dedicated supplier classes. The only primitive functional interface that does not involve one of those three types is <span class=\"dCode dNoWrap\">BooleanSupplier<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34180",
      "attempts_id": "392275",
      "question_id": "34180",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "987",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the simplest way of rewriting this code?<br><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;l&#160;=&#160;IntStream.range(1,&#160;6)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.mapToObj(i&#160;-&#62;&#160;i).collect(Collectors.toList());<\/span><br><span class=\"dCode dNoWrap\">l.forEach(System.out::println);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">IntStream.range(1,&#160;6);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">IntStream.range(1,&#160;6)<\/span><br><span class=\"dCode dNoWrap\">.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">IntStream.range(1,&#160;6)<\/span><br><span class=\"dCode dNoWrap\">.mapToObj(1&#160;-&#62;&#160;i)<\/span><br><span class=\"dCode dNoWrap\">.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "None of the above is equivalent.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The provided code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Both lists and streams have <span class=\"dCode dNoWrap\">forEach()<\/span> methods. There is no reason to collect into a list just to loop through it.",
        "display_order": "1"
      }]
    }]
  }
}