{
  "id": "392269",
  "title": null,
  "user_id": "14161",
  "course_id": "823",
  "test_id": "123",
  "section_id": null,
  "mode": "exam",
  "date_created": "2016-10-07 02:37:40",
  "lesson_location": "0",
  "status": "1",
  "category": "Book 9781119067900",
  "course_name": "OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide: <br\/>Exam 1Z0-809",
  "global_time": 0,
  "sections": {
    "directions": [{
      "id": "995",
      "test_id": "123",
      "description": "Bonus Exam 2",
      "time": "60",
      "direction": [{
        "id": "985",
        "reference_id": "995",
        "direction_for": "section",
        "data_type_id": "2",
        "data": "Section level Directions Text appears here.",
        "display_order": "0"
      }]
    }],
    "question": [{
      "id": "34379",
      "attempts_id": "392269",
      "question_id": "34379",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "4;5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following are true when this code is run with <span class=\"dCode dNoWrap\">java&#160;Fail<\/span>? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Fail&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String&#160;[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;int&#160;x&#160;=&#160;7;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;assert&#160;x&#160;&#62;=&#160;1&#160;&&&#160;x&#160;&#60;=&#160;6;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(x);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "There is a compiler error.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code throws an <span class=\"dCode dNoWrap\">AssertionError<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code throws an <span class=\"dCode dNoWrap\">AssertionException<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The output is <span class=\"dCode dNoWrap\">7<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The <span class=\"dCode dNoWrap\">assert<\/span> statement is ignored.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles, so A is incorrect. The command line does not enable assertions, so E is true and B is false, even though the assertion is <span class=\"dCode dNoWrap\">false<\/span>. C is false because there is no such class called <span class=\"dCode dNoWrap\">AssertionException<\/span>. Since no <span class=\"dCode dNoWrap\">AssertionError<\/span> is thrown, the code outputs <span class=\"dCode dNoWrap\">7<\/span>, so D is true and E is false. Therefore, the answer is D and E.",
        "display_order": "1"
      }]
    }, {
      "id": "34425",
      "attempts_id": "392269",
      "question_id": "34425",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assuming 100 milliseconds is enough time for the tasks submitted to the thread executor to complete, what is the result of executing the following code snippet? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">AtomicInteger&#160;lion1&#160;=&#160;new&#160;AtomicInteger(0);<\/span><br><span class=\"dCode dNoWrap\">final&#160;int[]&#160;lion2&#160;=&#160;{&#160;0&#160;};<\/span><br><br><span class=\"dCode dNoWrap\">ExecutorService&#160;service&#160;=&#160;Executors.newCachedThreadPool();&#160;\/\/&#160;h1<\/span><br><span class=\"dCode dNoWrap\">for&#160;(int&#160;i&#160;=&#160;0;&#160;i&#160;&#60;&#160;1000;&#160;i++)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;service.submit(()&#160;-&#62;&#160;lion1++);&#160;\/\/&#160;h2<\/span><br><span class=\"dCode dNoWrap\">for&#160;(int&#160;i&#160;=&#160;0;&#160;i&#160;&#60;&#160;1000;&#160;i++)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;service.submit(()&#160;-&#62;&#160;lion2[0]++);&#160;\/\/&#160;h3<\/span><br><span class=\"dCode dNoWrap\">Thread.sleep(100);<\/span><br><span class=\"dCode dNoWrap\">System.out.println(lion1&#160;+&#160;\"&#160;\"&#160;+&#160;lion2);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">1000&#160;999<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">1000&#160;100<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The output cannot be determined ahead of time.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">h1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">h2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">h3<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The increment operator <span class=\"dCode dNoWrap\">++<\/span> cannot be used on atomic objects, so line <span class=\"dCode dNoWrap\">h2<\/span> does not compile and E is the only correct answer. If a valid increment method had been used on <span class=\"dCode dNoWrap\">lion1<\/span>, then the answer would be C because the increment <span class=\"dCode dNoWrap\">++<\/span> operations on <span class=\"dCode dNoWrap\">lion2<\/span> could overwrite each other.",
        "display_order": "1"
      }]
    }, {
      "id": "34412",
      "attempts_id": "392269",
      "question_id": "34412",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following statements compile? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dSmall\"><span class=\"dCode dNoWrap\">java.util.List&#60;?&#160;extends&#160;java.sql.Statement&#62;&#160;list1&#160;=<br\/>&#160;new&#160;java.util.ArrayList&#60;&#62;();<\/span><\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dSmall\"><span class=\"dCode dNoWrap\">java.util.List&#60;?&#160;implements&#160;java.sql.Statement&#62;&#160;list2&#160;=<br\/>&#160;new&#160;java.util.ArrayList&#60;&#62;();<\/span><\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dSmall\"><span class=\"dCode dNoWrap\">java.util.List&#60;?&#160;extends&#160;java.sql.Statement&#62;&#160;list3&#160;=<br\/>&#160;new&#160;java.util.ArrayList()&#60;&#62;;<\/span><\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dSmall\"><span class=\"dCode dNoWrap\">java.util.List&#60;?&#160;implements&#160;java.sql.Statement&#62;&#160;list4&#160;=<br\/>&#160;new&#160;java.util.ArrayList()&#60;&#62;;<\/span><\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dSmall\"><span class=\"dCode dNoWrap\">java.util.List&#60;?&#160;extends&#160;java.sql.Statement&#62;&#160;list5&#160;=<br\/>&#160;new&#160;java.util.ArrayList();<\/span><\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dSmall\"><span class=\"dCode dNoWrap\">java.util.List&#60;?&#160;extends&#160;java.sql.Statement&#62;&#160;list6&#160;=<br\/>&#160;new&#160;java.util.List();<\/span><\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Option A creates a list that can contain any implementation of the <span class=\"dCode dNoWrap\">Statement<\/span> interface. E does the same without specifying the generic type. E will generate a compiler warning but not a compiler error. B is incorrect because generic declarations use <span class=\"dCode dNoWrap\">extends<\/span> rather than <span class=\"dCode dNoWrap\">implements<\/span> regardless of whether classes or interfaces are specified. C is incorrect because the diamond operator must come before the parenthesis. D is incorrect for both of these reasons. F is incorrect because <span class=\"dCode dNoWrap\">List<\/span> is an interface and cannot be instantiated. And yes, this question tests multiple concepts. The real exam will have some questions that do that as well.",
        "display_order": "1"
      }]
    }, {
      "id": "34395",
      "attempts_id": "392269",
      "question_id": "34395",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assuming <span class=\"dCode dNoWrap\">zoo.csv<\/span> is a multiline text file, what is true of the following code snippet?<br><br><span class=\"dCode dNoWrap\">try&#160;(FileReader&#160;fileReader&#160;=&#160;new&#160;FileReader(\"zoo.csv\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;BufferedReader&#160;bufferedReader&#160;=&#160;new&#160;BufferedReader(fileReader))&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;while(bufferedReader.readLine()&#160;!=&#160;null)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(bufferedReader.readLine());<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It prints the first line of the file to the console.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "It prints the entire contents of the file.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code does compile, but the reader is not closed.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code may print <span class=\"dCode dNoWrap\">null<\/span> at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles but may throw a <span class=\"dCode dNoWrap\">NullPointerException<\/span> at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "This code compiles, so C is incorrect. It uses a try-with-resource block to open the <span class=\"dCode dNoWrap\">FileReader<\/span> and <span class=\"dCode dNoWrap\">BufferedReader<\/span> objects. Therefore, both get closed automatically and D is incorrect. At first glance, the code appears to print every line of the file, but it contains a bug. The <span class=\"dCode dNoWrap\">readLine()<\/span> method is called twice on every iteration of the loop, so the code actually skips the first line and outputs every other line after that, so A and B are incorrect. Since <span class=\"dCode dNoWrap\">System.out.println()<\/span> is capable of printing <span class=\"dCode dNoWrap\">null<\/span> values, a <span class=\"dCode dNoWrap\">NullPointerException<\/span> will not be thrown, so F is incorrect. The correct answer is E, since the loop will output an extra <span class=\"dCode dNoWrap\">null<\/span> text value on files with an odd number of lines.",
        "display_order": "1"
      }]
    }, {
      "id": "34375",
      "attempts_id": "392269",
      "question_id": "34375",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which functional interface has three generic types and an <span class=\"dCode dNoWrap\">apply()<\/span> method?",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BiConsumer<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BinaryConsumer<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BiPredicate<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BinaryPredicate<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BiFunction<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BinaryFunction<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">BiFunction<\/span> takes three generic types. Two are for the parameters and one is for the return type. Choices B, D and F aren't the names of functional interfaces in Java.",
        "display_order": "1"
      }]
    }, {
      "id": "34399",
      "attempts_id": "392269",
      "question_id": "34399",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of the following code when run using the command <span class=\"dCode dNoWrap\">java&#160;-ea&#160;PickAColor<\/span>? <br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;PickAColor&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;enum&#160;Color&#160;{&#160;RED,&#160;BLUE,&#160;GREEN}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;go(Color&#160;c)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;switch&#160;(c)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case&#160;RED:&#160;System.out.println(\"red\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case&#160;BLUE:&#160;System.out.println(\"blue\");&#160;break;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case&#160;GREEN:&#160;System.out.println(\"green\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;default:&#160;assert&#160;false;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;go(Color.RED);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">red<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">redblue<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">redblue<\/span>, followed by an <span class=\"dCode dNoWrap\">AssertionError<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">redbluegreen<\/span>, followed by an <span class=\"dCode dNoWrap\">AssertionError<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "This is a tricky question. It appears to be about assertions. It is really testing whether you remember your OCA basics on flow. The code does compile. Enums use the unqualified name in the case statements, making the code correct. Since <span class=\"dCode dNoWrap\">red<\/span> doesn't have a break, it falls through to <span class=\"dCode dNoWrap\">blue<\/span>. As shown in Chapter 6, assertions fail only if they are run and evaluate to <span class=\"dCode dNoWrap\">false<\/span>. ",
        "display_order": "1"
      }]
    }, {
      "id": "34396",
      "attempts_id": "392269",
      "question_id": "34396",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following can fill in the blank correctly? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">ResultSet&#160;rs&#160;=&#160;stmt.executeQuery(sql);if&#160;(rs.next())&#160;{<\/span><br><span class=\"dCode dNoWrap\">_______________________________<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">int&#160;num&#160;=&#160;rs.getInt(0);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">int&#160;num&#160;=&#160;rs.getInt(1);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">int&#160;num&#160;=&#160;rs.getInteger(0);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">int&#160;num&#160;=&#160;rs.getInteger(1);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">int&#160;num&#160;=&#160;rs.getObject(0);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">int&#160;num&#160;=&#160;rs.getObject(1);<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "In a <span class=\"dCode dNoWrap\">ResultSet<\/span>, columns are indexed starting with 1, not 0. Therefore, choices A, C, and E are incorrect. There are methods to get the column as an <span class=\"dCode dNoWrap\">int<\/span> or <span class=\"dCode dNoWrap\">Object<\/span>. However, choice F is incorrect because an <span class=\"dCode dNoWrap\">Object<\/span> cannot be assigned to a <span class=\"dCode dNoWrap\">String<\/span> without a cast. Choice D is incorrect because the method is not named <span class=\"dCode dNoWrap\">getInteger()<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34389",
      "attempts_id": "392269",
      "question_id": "34389",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following?<br><br><span class=\"dCode dNoWrap\">Stream&#60;String&#62;&#160;s&#160;=&#160;Stream.empty();<\/span><br><span class=\"dCode dNoWrap\">Map&#60;Boolean,&#160;List&#60;String&#62;&#62;&#160;p&#160;=&#160;s.collect(<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;Collectors.partitioningBy(b&#160;-&#62;&#160;b.startsWith(\"c\")));<\/span><br><span class=\"dCode dNoWrap\">Map&#60;Boolean,&#160;List&#60;String&#62;&#62;&#160;g&#160;=&#160;s.collect(<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;Collectors.groupingBy(b&#160;-&#62;&#160;b.startsWith(\"c\")));<\/span><br><span class=\"dCode dNoWrap\">System.out.println(p&#160;+&#160;\"&#160;\"&#160;+&#160;g);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{}&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{}&#160;{false=[],&#160;true=[]}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{false=[],&#160;true=[]}&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{false=[],&#160;true=[]}&#160;{false=[],&#160;true=[]}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "An exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code tries to use the same stream twice. This is not allowed, and it throws an exception that the stream has already been operated on or closed.",
        "display_order": "1"
      }]
    }, {
      "id": "34414",
      "attempts_id": "392269",
      "question_id": "34414",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of the following code?<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Sorting&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;static&#160;class&#160;Lizard&#160;implements&#160;Comparator&#60;Lizard&#62;&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;int&#160;weight;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;Lizard(int&#160;w)&#160;{&#160;weight&#160;=&#160;w;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;public&#160;int&#160;compare(Lizard&#160;l,&#160;Lizard&#160;m)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return&#160;l.weight&#8212;m.weight;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;public&#160;String&#160;toString()&#160;{&#160;return&#160;\"\"&#160;+&#160;weight;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;List&#60;Lizard&#62;&#160;list&#160;=&#160;new&#160;ArrayList&#60;&#62;();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;list.add(new&#160;Lizard(5));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;list.add(new&#160;Lizard(4));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;list.add(new&#160;Lizard(7));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;Collections.sort(list);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(list);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;}&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">[4,&#160;5,&#160;7]<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">[5,&#160;4,&#160;7]<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">[7,&#160;5,&#160;4]<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">Lizard<\/span> implements <span class=\"dCode dNoWrap\">Comparator<\/span>, not <span class=\"dCode dNoWrap\">Comparable<\/span>. In order to sort a <span class=\"dCode dNoWrap\">List<\/span>, it needs to be <span class=\"dCode dNoWrap\">Comparable<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34424",
      "attempts_id": "392269",
      "question_id": "34424",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following is a valid JDBC URL?",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">jdbc:oracle:123.123.123.123<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">jdbc:oracle:thin:123.123.123.123<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">jdbc:oracle:thin:123.123.123.123\/\/fun<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">oracle:jdbc:123.123.123.123<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">oracle:jdbc:thin:123.123.123.123<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">oracle:jdbc:thin:123.123.123.123\/\/fun<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "A JDBC URL must begin with <span class=\"dCode dNoWrap\">JDBC<\/span>, making choices D, E, and F incorrect. The database name is required, making choices A and B incorrect. Therefore the answer is C.",
        "display_order": "1"
      }]
    }, {
      "id": "34370",
      "attempts_id": "392269",
      "question_id": "34370",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assume that you have an <span class=\"dCode dNoWrap\">InputStream<\/span> whose next bytes are <span class=\"dCode dNoWrap\">DINO<\/span>. What would the next <span class=\"dCode dNoWrap\">char<\/span> be that could be read from the stream after calling the following method on the stream, using a <span class=\"dCode dNoWrap\">count<\/span> value of <span class=\"dCode dNoWrap\">2<\/span>?<br><br><span class=\"dSmall\"><span class=\"dCode dNoWrap\">public&#160;static&#160;String&#160;pullBytes(InputStream&#160;is,&#160;int&#160;count)&#160;throws&#160;IOException&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;final&#160;StringBuilder&#160;sb&#160;=&#160;new&#160;StringBuilder();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;sb.append((char)is.read());<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;if(is.markSupported())&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;is.mark(100);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;for(int&#160;i=0;&#160;i&#60;count;&#160;i++)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sb.append((char)is.read());<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;is.skip(20);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;is.reset();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;sb.append((char)is.read());<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;return&#160;sb.toString();<\/span><br><span class=\"dCode dNoWrap\">}<\/span><\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">D<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">I<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">N<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">O<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The result cannot be determined with the information given.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles and runs without issue, because it performs the mark operation only if the stream supports it, so E and F are incorrect. The first value read is <span class=\"dCode dNoWrap\">D<\/span>. Assuming the mark operation is supported, <span class=\"dCode dNoWrap\">IN<\/span> is read, but then the stream is reset back to the <span class=\"dCode dNoWrap\">D<\/span> position. In other words, the position of the stream after the <span class=\"dCode dNoWrap\">if\/then<\/span> statement is the same regardless of whether the stream supports the mark operation. The next character read is <span class=\"dCode dNoWrap\">I<\/span>, leading the final character after the method call to be <span class=\"dCode dNoWrap\">N<\/span>, and D is correct. Since the value is the same regardless of whether the stream operation is supported, G is incorrect.",
        "display_order": "1"
      }]
    }, {
      "id": "34386",
      "attempts_id": "392269",
      "question_id": "34386",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "3;4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following are true statements about the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">1:&#160;&#160;&#160;&#160;public&#160;class&#160;Outer&#160;{<\/span><br><span class=\"dCode dNoWrap\">2:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for&#160;(int&#160;i&#160;=&#160;0;&#160;i&#160;&#60;&#160;3;&#160;i++)&#160;{<\/span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;class&#160;Inner&#160;{<\/span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public&#160;static&#160;void&#160;print()&#160;{<\/span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.<i>out<\/i>.println(\"Roar!\");<\/span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;<\/span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}&#160;<\/span><br><span class=\"dCode dNoWrap\">9:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">10:&#160;&#160;&#160;&#160;&#160;&#160;&#160;new&#160;Inner().print();<\/span><br><span class=\"dCode dNoWrap\">11:&#160;&#160;&#160;}&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The code prints <span class=\"dCode dNoWrap\">Roar!<\/span> three times.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "Line 4 does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "Line 5 does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "Line 10 does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "A different line does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown because an inner class is declared in a loop.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "A local inner class is not allowed to have static methods. It also goes out of scope like regular local variables. <span class=\"dCode dNoWrap\">Inner<\/span> is scoped to be inside the <span class=\"dCode dNoWrap\">for<\/span> loop. It is legal to declare an inner class inside a loop as long as it is referenced only inside that loop.",
        "display_order": "1"
      }]
    }, {
      "id": "34398",
      "attempts_id": "392269",
      "question_id": "34398",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of the following code?<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;FourLegged&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;String&#160;walk&#160;=&#160;\"walk,\";<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;void&#160;walk()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;System.<i>out<\/i>.print(walk);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;static&#160;class&#160;BabyRhino&#160;extends&#160;FourLegged&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;String&#160;walk&#160;=&#160;\"toddle,\";<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;FourLegged&#160;f&#160;=&#160;new&#160;BabyRhino();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;BabyRhino&#160;b&#160;=&#160;new&#160;BabyRhino();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;f.walk();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;b.walk();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">toddle,toddle,<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">toddle,walk,<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">walk,toddle,<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">walk,walk,<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Both objects are <span class=\"dCode dNoWrap\">BabyRhino<\/span> objects. While the subclass does have a <span class=\"dCode dNoWrap\">walk<\/span> instance variable, it would be used only if referenced from the subclass. Since the <span class=\"dCode dNoWrap\">walk()<\/span> method is in the superclass, the superclass instance variable is still used.",
        "display_order": "1"
      }]
    }, {
      "id": "34384",
      "attempts_id": "392269",
      "question_id": "34384",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;4;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following are properties of classes that are properly encapsulated as a JavaBean? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "All instance variables are marked <span class=\"dCode dNoWrap\">private<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "They don't allow referenced mutable objects to be modified or accessed directly.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The class is declared <span class=\"dCode dNoWrap\">final<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "Instance variables are modified using <span class=\"dCode dNoWrap\">public<\/span> setter methods.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "They implement the <span class=\"dCode dNoWrap\">JavaBean<\/span> interface.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">boolean<\/span> instance variables are accessed with <span class=\"dCode dNoWrap\">is<\/span> or <span class=\"dCode dNoWrap\">get<\/span>.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "A, D, and F are each correct statements about JavaBean encapsulation. B and C are both incorrect, because these are common properties of the immutable object pattern, not encapsulation. Finally, E is incorrect, because there is no such <span class=\"dCode dNoWrap\">JavaBean<\/span> interface defined in the Java API.",
        "display_order": "1"
      }]
    }, {
      "id": "34390",
      "attempts_id": "392269",
      "question_id": "34390",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following code?<br><br><span class=\"dCode dNoWrap\">import&#160;java.io.*;<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;AutocloseableFlow&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;static&#160;class&#160;Door&#160;implements&#160;AutoCloseable&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;public&#160;void&#160;close()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(\"D\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;static&#160;class&#160;Window&#160;implements&#160;Closeable&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;public&#160;void&#160;close()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(\"W\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;try&#160;(Door&#160;d&#160;=&#160;new&#160;Door();&#160;Window&#160;w&#160;=&#160;new&#160;Window())&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(\"T\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;throw&#160;new&#160;RuntimeException();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}&#160;catch&#160;(Exception&#160;e)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(\"E\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}&#160;finally&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(\"F\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}&#160;}&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TWF<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TWDF<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TWDEF<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TWF<\/span> followed by an exception",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TWDF<\/span> followed by an exception",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TWEF<\/span> followed by an exception",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "After opening both resources in the try-with-resources statement, <span class=\"dCode dNoWrap\">T<\/span> is printed. Even though an exception is thrown, the try-with-resource completes and closes the resources in the reverse of the order in which they were opened. <span class=\"dCode dNoWrap\">W<\/span> and <span class=\"dCode dNoWrap\">D<\/span> are printed. The exception thrown is then caught, and <span class=\"dCode dNoWrap\">E<\/span> is printed. Last, the <span class=\"dCode dNoWrap\">finally<\/span> block is run, printing <span class=\"dCode dNoWrap\">F<\/span>. Therefore the answer is <span class=\"dCode dNoWrap\">TWDEF<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34416",
      "attempts_id": "392269",
      "question_id": "34416",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of the following statements?<br><br><span class=\"dCode dNoWrap\">3:&#160;&#160;&#160;&#160;Set&#160;points&#160;=&#160;new&#160;TreeSet();<\/span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;points.add(7);<\/span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;points.add(5);<\/span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;points.add(-4);<\/span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;points.add(6);<\/span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;&#160;for&#160;(Number&#160;point:&#160;points)<\/span><br><span class=\"dCode dNoWrap\">9:&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(point);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">75&#8211;45<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">765&#8211;4<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">-4567<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The output is indeterminate.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "An exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Line 8 gives a compiler error. Since the <span class=\"dCode dNoWrap\">Set<\/span> does not use generics, the <span class=\"dCode dNoWrap\">for<\/span> loop would need to use <span class=\"dCode dNoWrap\">Object<\/span> rather than <span class=\"dCode dNoWrap\">Number<\/span>. If the <span class=\"dCode dNoWrap\">for<\/span> loop were corrected, the answer would be choice C.",
        "display_order": "1"
      }]
    }, {
      "id": "34367",
      "attempts_id": "392269",
      "question_id": "34367",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which are true statements? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">findAny()<\/span> and<span class=\"dCode dNoWrap\">&#160;findFirst()<\/span> are guaranteed to return the same result if the stream is empty.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">findAny()<\/span> and<span class=\"dCode dNoWrap\">&#160;findFirst()<\/span> are guaranteed to return the same result if the stream has exactly one element.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">findAny()<\/span> and<span class=\"dCode dNoWrap\">&#160;findFirst()<\/span> are guaranteed to return the same result if the stream has exactly two elements.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">findAny()<\/span> returns a <span class=\"dCode dNoWrap\">boolean<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">findFirst()<\/span> returns a <span class=\"dCode dNoWrap\">boolean<\/span>.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "When the stream is empty, both methods return an empty <span class=\"dCode dNoWrap\">Optional<\/span>. When the stream has one element, both methods return an <span class=\"dCode dNoWrap\">Optional<\/span> containing that element. When there are multiple elements, <span class=\"dCode dNoWrap\">findAny()<\/span> makes no guarantees about which element is returned.",
        "display_order": "1"
      }]
    }, {
      "id": "34371",
      "attempts_id": "392269",
      "question_id": "34371",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "4;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">1:&#160;public&#160;abstract&#160;interface&#160;CanSwim&#160;{<\/span><br><span class=\"dCode dNoWrap\">2:&#160;&#160;&#160;&#160;int&#160;MAX_DISTANCE&#160;=&#160;10;<\/span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;&#160;&#160;abstract&#160;void&#160;swim();<\/span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;default&#160;static&#160;boolean&#160;hasFlippers()&#160;{return&#160;false;}<\/span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;public&#160;static&#160;int&#160;getMaxDistance()&#160;{&#160;return&#160;MAX_DISTANCE;&#160;}<\/span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;public&#160;final&#160;static&#160;void&#160;checkSwimmer()&#160;{}<\/span><br><span class=\"dCode dNoWrap\">7:&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles without issue.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line 2.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line 3.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line 4.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line 5.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line 6.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "B is incorrect, since line 2 compiles without issue. Note that the compiler will insert <span class=\"dCode dNoWrap\">public<\/span> <span class=\"dCode dNoWrap\">static<\/span> <span class=\"dCode dNoWrap\">final<\/span> in all interface variables. C is incorrect, since line 3 compiles without issue. D is correct, because line 4 uses both <span class=\"dCode dNoWrap\">default<\/span> and <span class=\"dCode dNoWrap\">static<\/span> modifiers. Interfaces allow only one method modifier&#8212;<span class=\"dCode dNoWrap\">default<\/span>, <span class=\"dCode dNoWrap\">static<\/span>, or <span class=\"dCode dNoWrap\">abstract<\/span>&#8212;the last of which is assumed if no other modifier is present. E is incorrect, because a <span class=\"dCode dNoWrap\">static<\/span> method can access a variable assumed to be <span class=\"dCode dNoWrap\">static<\/span> since it is defined in an interface. F is correct, because an interface method cannot be marked <span class=\"dCode dNoWrap\">final<\/span>, even if it is a <span class=\"dCode dNoWrap\">static<\/span> method. Finally, A is incorrect because D and F demonstrate errors in the code.",
        "display_order": "1"
      }]
    }, {
      "id": "34413",
      "attempts_id": "392269",
      "question_id": "34413",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "3;7",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What changes need to be made to make the following singleton pattern correct? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;ExhibitionManager&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;final&#160;static&#160;ExhibitionManager&#160;exhibitionManager;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;static&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;exhibitionManager&#160;=&#160;new&#160;ExhibitionManager();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;protected&#160;ExhibitionManager()&#160;{}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;ExhibitionManager&#160;getExhibitionManager()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;return&#160;new&#160;ExhibitionManager();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "None, the singleton pattern is properly implemented.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "Remove the <span class=\"dCode dNoWrap\">final<\/span> from the <span class=\"dCode dNoWrap\">exhibitionManager<\/span> variable declaration.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "Change the <span class=\"dCode dNoWrap\">ExhibitionManager<\/span> constructor to <span class=\"dCode dNoWrap\">private<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "Synchronize the <span class=\"dCode dNoWrap\">getExhibitionManager()<\/span> method.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "Rename <span class=\"dCode dNoWrap\">exhibitionManager<\/span> to be <span class=\"dCode dNoWrap\">instance<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "Rename the <span class=\"dCode dNoWrap\">getExhibitionManager()<\/span> to be <span class=\"dCode dNoWrap\">getInstance()<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "Change the <span class=\"dCode dNoWrap\">getExhibitionManager()<\/span> method to return the <span class=\"dCode dNoWrap\">static<\/span> <span class=\"dCode dNoWrap\">exhibitionManager<\/span> object.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The singleton pattern is nearly correct but has some problems, so A is incorrect. B is incorrect, since the <span class=\"dCode dNoWrap\">final<\/span> modifier helps guarantee only one instance of the singleton reference is ever created. C is correct, because the <span class=\"dCode dNoWrap\">private<\/span> modifier should be added to prevent subclasses from creating instances of the class. D is incorrect, because synchronization is not required if the singleton object already exists, which it would be since it is marked <span class=\"dCode dNoWrap\">final<\/span> in the singleton declaration. E and F are incorrect, because the names of the singleton object and accessor method are not specified by the singleton pattern. G is correct, because the method <span class=\"dCode dNoWrap\">getExhibitionManager()<\/span> returns a new object every time, whereas it should return the singleton <span class=\"dCode dNoWrap\">static<\/span> <span class=\"dCode dNoWrap\">exhibitionManager<\/span> object.",
        "display_order": "1"
      }]
    }, {
      "id": "34387",
      "attempts_id": "392269",
      "question_id": "34387",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of the following?<br><br><span class=\"dCode dNoWrap\">Map&#60;Integer,&#160;Integer&#62;&#160;map&#160;=&#160;new&#160;HashMap&#60;&#62;();<\/span><br><span class=\"dCode dNoWrap\">map.put(1,&#160;10);<\/span><br><span class=\"dCode dNoWrap\">map.put(2,&#160;20);<\/span><br><span class=\"dCode dNoWrap\">map.put(3,&#160;null);<\/span><br><br><span class=\"dCode dNoWrap\">map.merge(1,&#160;3,&#160;(a,b)&#160;-&#62;&#160;null);<\/span><br><span class=\"dCode dNoWrap\">map.merge(3,&#160;3,&#160;(a,b)&#160;-&#62;&#160;null);<\/span><br><br><span class=\"dCode dNoWrap\">System.out.println(map);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{2=20}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{2=20,&#160;3=null}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{2=20,&#160;3=3}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "An exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The first call to <span class=\"dCode dNoWrap\">merge()<\/span> removes the first key because the mapping function returns <span class=\"dCode dNoWrap\">null<\/span>. The second call to <span class=\"dCode dNoWrap\">merge()<\/span> does not call the mapping function since the existing map value is <span class=\"dCode dNoWrap\">null<\/span>&#8212;it simply returns the value specified in the parameter. Key 2 is never touched. Therefore, the answer is choice D.",
        "display_order": "1"
      }]
    }, {
      "id": "34407",
      "attempts_id": "392269",
      "question_id": "34407",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following are true? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;l1&#160;=&#160;Arrays.asList();<\/span><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;l2&#160;=&#160;Arrays.asList(1,&#160;2,&#160;3);<\/span><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;l3&#160;=&#160;Arrays.asList(4,&#160;5,&#160;6);<\/span><br><br><span class=\"dCode dNoWrap\">Stream.of(l1,&#160;l2,&#160;l3)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;.limit(2)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;.peek(System.out::println)&#160;\/\/&#160;peek&#160;1<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;.flatMap(x&#160;-&#62;&#160;x.stream())<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;.peek(System.out::println)&#160;\/\/&#160;peek&#160;2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;.map(x&#160;-&#62;&#160;x&#160;+&#160;1);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "Zero lines are generated by the line marked by <span class=\"dCode dNoWrap\">peek&#160;1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "Two lines are generated by the line marked by <span class=\"dCode dNoWrap\">peek&#160;1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "Three lines are generated by the line marked by <span class=\"dCode dNoWrap\">peek&#160;1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "Zero lines are generated by the line marked by <span class=\"dCode dNoWrap\">peek&#160;2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "Two lines are generated by the line marked by <span class=\"dCode dNoWrap\">peek&#160;2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "Three lines are generated by the line marked by <span class=\"dCode dNoWrap\">peek&#160;2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "8",
        "data": [{
          "data_type_id": "2",
          "data": "The code throws an exception.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "What's the terminal operation? There isn't one. That means that the intermediate operations, including both <span class=\"dCode dNoWrap\">peek()<\/span> statements, never run.",
        "display_order": "1"
      }]
    }, {
      "id": "34397",
      "attempts_id": "392269",
      "question_id": "34397",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following?<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;SnowStorm&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;static&#160;class&#160;Walk&#160;implements&#160;AutoCloseable&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;public&#160;void&#160;close()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;throw&#160;new&#160;RuntimeException(\"snow\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span><br><span class=\"dCode dNoWrap\">public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;try&#160;(Walk&#160;walk1&#160;=&#160;new&#160;Walk())&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;throw&#160;new&#160;RuntimeException(\"rain\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}&#160;catch(Exception&#160;e)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;System.out.println(e.getMessage()<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;+&#160;\"&#160;\"&#160;+&#160;e.getSuppressed().length);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;}&#160;}&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rain&#160;0<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rain&#160;1<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rain&#160;2<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">show&#160;0<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">snow&#160;1<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">snow&#160;2<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The exception inside the <span class=\"dCode dNoWrap\">try<\/span> block becomes the primary exception since it is thrown first. Then one suppressed exception is added to it when trying to close the <span class=\"dCode dNoWrap\">AutoCloseable<\/span> resource.",
        "display_order": "1"
      }]
    }, {
      "id": "34377",
      "attempts_id": "392269",
      "question_id": "34377",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following are properties of classes that define immutable objects? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "All of the instance variables are marked <span class=\"dCode dNoWrap\">private<\/span> and <span class=\"dCode dNoWrap\">final<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "They allow referenced mutable objects to be modified or accessed directly.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "They extend the abstract <span class=\"dCode dNoWrap\">Immutable<\/span> class.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "They don't define any setter methods.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "They have only a single <span class=\"dCode dNoWrap\">getInstance()<\/span> <span class=\"dCode dNoWrap\">public<\/span> method.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Immutable objects may not be modified after creation. A and D are correct statements that support this property. B is incorrect, because this is the direct opposite of what the immutable pattern allows. C is also incorrect, since there is no such thing as the <span class=\"dCode dNoWrap\">Immutable<\/span> class defined in the Java API. E is incorrect, because this is a common property of the singleton pattern, not the immutable object pattern.",
        "display_order": "1"
      }]
    }, {
      "id": "34376",
      "attempts_id": "392269",
      "question_id": "34376",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following code if the default system time is US\/Eastern?<br><br><span class=\"dCode dNoWrap\">LocalDate&#160;date&#160;=&#160;LocalDate.of&#160;(2100,&#160;5,&#160;14);<\/span><br><span class=\"dCode dNoWrap\">LocalTime&#160;time&#160;=&#160;LocalTime.of(9,&#160;15);<\/span><br><span class=\"dCode dNoWrap\">LocalDateTime&#160;dateTime&#160;=&#160;LocalDateTime.of(date,&#160;time);<\/span><br><span class=\"dCode dNoWrap\">Duration&#160;d&#160;=&#160;Duration.of(1,&#160;ChronoUnit.WEEKS);<\/span><br><span class=\"dCode dNoWrap\">System.out.println(dateTime.plus(d));<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2100<\/span>&#8211;<span class=\"dCode dNoWrap\">05<\/span>&#8211;<span class=\"dCode dNoWrap\">14T09:15<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2100<\/span>&#8211;<span class=\"dCode dNoWrap\">05<\/span>&#8211;<span class=\"dCode dNoWrap\">14T09:15[US\/Eastern]<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2100<\/span>&#8211;<span class=\"dCode dNoWrap\">05<\/span>&#8211;<span class=\"dCode dNoWrap\">21T09:15<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2100<\/span>&#8211;<span class=\"dCode dNoWrap\">05<\/span>&#8211;<span class=\"dCode dNoWrap\">21T09:15[US\/Eastern]<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">Duration<\/span> uses units of hours\/minutes\/seconds. It is not valid to add a week unit, so the code throws an exception.",
        "display_order": "1"
      }]
    }, {
      "id": "34417",
      "attempts_id": "392269",
      "question_id": "34417",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "7",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of calling the following method?<br><br><span class=\"dSmall\"><span class=\"dCode dNoWrap\">public&#160;static&#160;void&#160;printData(BlockingDeque&#60;Boolean&#62;&#160;deque)&#160;throws&#160;InterruptedException&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;deque.offerLast(true,&#160;4,&#160;TimeUnit.MICROSECONDS);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;deque.offer(true);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;deque.offerFirst(false,&#160;25,&#160;TimeUnit.SECONDS);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;System.out.print(deque.pollFirst(5,&#160;TimeUnit.DAYS));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;System.out.print(\"&#160;\"+deque.pollLast(2,&#160;TimeUnit.NANOSECONDS));<\/span><br><span class=\"dCode dNoWrap\">}<\/span><\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">true&#160;false<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">false&#160;true<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">true&#160;true<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">false&#160;false<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The output cannot be determined ahead of time.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles and runs without issue, although the <span class=\"dCode dNoWrap\">deque<\/span> may be blocked at runtime when the <span class=\"dCode dNoWrap\">offerFirst()<\/span>, <span class=\"dCode dNoWrap\">offerLast()<\/span>, <span class=\"dCode dNoWrap\">pollFirst()<\/span>, and <span class=\"dCode dNoWrap\">pollLast()<\/span> operations are called; therefore the answer is G. If it were not blocked and there were no other operations on the <span class=\"dCode dNoWrap\">deque<\/span>, then the output would be <span class=\"dCode dNoWrap\">false&#160;true<\/span>, and B would be correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34404",
      "attempts_id": "392269",
      "question_id": "34404",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Suppose that you have a table <span class=\"dCode dNoWrap\">animal<\/span> with three rows. The names in those rows are <span class=\"dCode dNoWrap\">Anna<\/span>, <span class=\"dCode dNoWrap\">Betty<\/span>, and <span class=\"dCode dNoWrap\">Cat<\/span>. What does the following output?<br><br><span class=\"dCode dNoWrap\">String&#160;sql&#160;=&#160;\"select&#160;name&#160;from&#160;animal&#160;order&#160;by&#160;name\";<\/span><br><span class=\"dCode dNoWrap\">try&#160;(Connection&#160;conn&#160;=&#160;DriverManager.getConnection(\"jdbc:derby:zoo\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;Statement&#160;stmt&#160;=&#160;conn.createStatement(<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ResultSet.CONCUR_READ_ONLY,&#160;ResultSet.TYPE_SCROLL_INSENSITIVE);<\/span><br><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;ResultSet&#160;rs&#160;=&#160;stmt.executeQuery(sql))&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.next();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.previous();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.previous();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.next();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.next();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.absolute(2);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;System.out.println(rs.getString(1));<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Anna<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Betty<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Cat<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "A <span class=\"dCode dNoWrap\">SQLException<\/span> is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "When creating the <span class=\"dCode dNoWrap\">Statement<\/span>, the parameters are reversed. The <span class=\"dCode dNoWrap\">ResultSet<\/span> type is supposed to be the first parameter, and the concurrency mode is supposed to be the second type.",
        "display_order": "1"
      }]
    }, {
      "id": "34380",
      "attempts_id": "392269",
      "question_id": "34380",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of executing the following code snippet?<br><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;list1&#160;=&#160;new&#160;ArrayList&#60;&#62;(Arrays.asList(1,2,3));<\/span><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;list2&#160;=&#160;new&#160;CopyOnWriteArrayList&#60;&#62;(list1);<\/span><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;list3&#160;=&#160;Collections.synchronizedList(list1);<\/span><br><br><span class=\"dCode dNoWrap\">for(Integer&#160;item&#160;:&#160;list2)&#160;list2.add(10);&#160;\/\/&#160;h1<\/span><br><span class=\"dCode dNoWrap\">for(Integer&#160;item&#160;:&#160;list3)&#160;list3.remove(0);&#160;\/\/&#160;h2<\/span><br><span class=\"dCode dNoWrap\">System.out.println(list1.size()+\"&#160;\"+list2.size()+\"&#160;\"+list3.size());<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">3&#160;6&#160;3<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">3&#160;6&#160;0<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">6&#160;6&#160;0<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but throws an exception at runtime on line <span class=\"dCode dNoWrap\">h1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but throws an exception at runtime on line <span class=\"dCode dNoWrap\">h2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but enters an infinite loop at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles without issue, so D is incorrect. The <span class=\"dCode dNoWrap\">CopyOnWriteArrrayList<\/span> class is designed to preserve the original list on iteration, so the first loop will be executed exactly three times and E is incorrect. On the other hand, a list created from the <span class=\"dCode dNoWrap\">Collections.synchronizedList()<\/span> method is thread safe for operations on the individual elements but not on an iterator; therefore line <span class=\"dCode dNoWrap\">h2<\/span> will throw a <span class=\"dCode dNoWrap\">ConcurrentModificationException<\/span> at runtime, and F is the correct answer. Note that if line <span class=\"dCode dNoWrap\">h2<\/span> was removed, the rest of the code would run without throwing an exception, outputting <span class=\"dCode dNoWrap\">3&#160;6&#160;3<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34366",
      "attempts_id": "392269",
      "question_id": "34366",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of the following statements?<br><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;Set&#60;Integer&#62;&#160;set&#160;=&#160;new&#160;HashSet&#60;&#62;();<\/span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;set.add(new&#160;Integer(6));<\/span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;set.add(new&#160;Integer(6));<\/span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;System.out.println(set.size()&#160;+&#160;\"&#160;\"&#160;+&#160;set.contains(6));<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">1&#160;false<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">1&#160;true<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2&#160;false<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2&#160;true<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "A set cannot contain duplicate values. The wrapper classes, such as <span class=\"dCode dNoWrap\">Integer<\/span>, define equality by the value they are wrapping, so the one on line 6 is considered to be a duplicate. On line 7, Java uses autoboxing to convert the primitive to an <span class=\"dCode dNoWrap\">Integer<\/span> object.",
        "display_order": "1"
      }]
    }, {
      "id": "34422",
      "attempts_id": "392269",
      "question_id": "34422",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assuming that the file <span class=\"dCode dNoWrap\">baboon.txt<\/span> exists, and it is available for read\/write access within the file system, what is the result of executing the following code? (Choose all that apply.)<br><br><span class=\"dSmall\"><span class=\"dCode dNoWrap\">Path&#160;path&#160;=&#160;Paths.get(\"baboon.txt\");<\/span><br><span class=\"dCode dNoWrap\">BasicFileAttributeView&#160;view&#160;=&#160;Files.getFileAttributeView(path,BasicFileAttributeView.class);<\/span><br><span class=\"dCode dNoWrap\">BasicFileAttributes&#160;data&#160;=&#160;view.readAttributes();&#160;\/\/&#160;x1<\/span><br><span class=\"dCode dNoWrap\">view.setTimes(null,null,null);&#160;\/\/&#160;x2<\/span><\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It updates all of the file date\/time values to the epoch.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "It does not modify any of the file date\/time values.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">x1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">x2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles without issue, so C and D are incorrect. The <span class=\"dCode dNoWrap\">BasicFileAttributeView.setTimes()<\/span> method takes <span class=\"dCode dNoWrap\">null<\/span> arguments if the date\/time value should not be modified, so the code does not modify the date\/time values of the file; thus B is correct and A is incorrect. Since it is given in the question description that the file exists and that it is available for read\/write access at runtime, E is incorrect because this code would not throw a runtime exception under normal circumstances. Also, note that the <span class=\"dCode dNoWrap\">BasicFileAttributes<\/span> object is retrieved for the file but never used.",
        "display_order": "1"
      }]
    }, {
      "id": "34402",
      "attempts_id": "392269",
      "question_id": "34402",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "5;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following changes must be made in order for the following code to print out <span class=\"dCode dNoWrap\">2<\/span>? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">import&#160;java.util.*;<\/span><br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Panda&#160;&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;String&#160;name;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;Panda(String&#160;name)&#160;{&#160;this.name&#160;=&#160;name;&#160;}<\/span><br><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;Set&#160;s&#160;=&#160;new&#160;HashSet&#60;&#62;();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;s.add(new&#160;Panda(\"Bao&#160;Bao\"));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;s.add(new&#160;Panda(\"Mei&#160;Xiang\"));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;s.add(new&#160;Panda(\"Bao&#160;Bao\"));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(s.size());<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "Have <span class=\"dCode dNoWrap\">class<\/span> implement <span class=\"dCode dNoWrap\">Comparable<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "Have <span class=\"dCode dNoWrap\">class<\/span> implement <span class=\"dCode dNoWrap\">Comparator<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "Override <span class=\"dCode dNoWrap\">compare()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "Override <span class=\"dCode dNoWrap\">compareTo()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "Override <span class=\"dCode dNoWrap\">equals()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "Override <span class=\"dCode dNoWrap\">hashCode()<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">HashSet<\/span> groups elements into buckets using the hash code. If elements have the same hash code, it then calls <span class=\"dCode dNoWrap\">equals()<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34420",
      "attempts_id": "392269",
      "question_id": "34420",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;3;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following statements can be inserted in the blank so that the code will compile successfully? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Snake&#160;{}<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Cobra&#160;extends&#160;Snake&#160;{}<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;GardenSnake&#160;{}<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;SnakeHandler&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;private&#160;Snake&#160;snake;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;void&#160;setSnake(Snake&#160;snake)&#160;{&#160;this.snake&#160;=&#160;snake;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;new&#160;SnakeHandler().setSnake(___________);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">new&#160;Cobra()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">new&#160;GardenSnake()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">new&#160;Snake()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">new&#160;Object()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">new&#160;String(\"Snake\")<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">null<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "First off, <span class=\"dCode dNoWrap\">Cobra<\/span> is a subclass of <span class=\"dCode dNoWrap\">Snake<\/span>, so A can be used. <span class=\"dCode dNoWrap\">GardenSnake<\/span> is not defined as a subclass of <span class=\"dCode dNoWrap\">Snake<\/span>, so it cannot be used and B is incorrect. The class <span class=\"dCode dNoWrap\">Snake<\/span> is not marked as <span class=\"dCode dNoWrap\">abstract<\/span>, so it can be instantiated and passed, so C is correct. Next, <span class=\"dCode dNoWrap\">Object<\/span> is a superclass of <span class=\"dCode dNoWrap\">Snake<\/span>, not a subclass, so it also cannot be used and D is incorrect. The class <span class=\"dCode dNoWrap\">String<\/span> is unrelated in this example, so E is incorrect. Finally, a <span class=\"dCode dNoWrap\">null<\/span> value can always be passed as an object value, regardless of type, so F is correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34393",
      "attempts_id": "392269",
      "question_id": "34393",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which is a true statement about the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;WhatisIt&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;static&#160;interface&#160;Furry&#160;{&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;static&#160;class&#160;Chipmunk&#160;&#160;{&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;static&#160;class&#160;FurryChipmunk&#160;implements&#160;Furry&#160;{&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;Chipmunk&#160;c&#160;=&#160;new&#160;Chipmunk();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;int&#160;result&#160;=&#160;0;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(c&#160;instanceof&#160;Furry)&#160;result&#160;+=&#160;1;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(c&#160;instanceof&#160;Chipmunk)&#160;result&#160;+=2;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(null&#160;instanceof&#160;FurryChipmunk)&#160;result&#160;+=&#160;4;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;System.<i>out<\/i>.println(result);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles, and the output is <span class=\"dCode dNoWrap\">1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles, and the output is <span class=\"dCode dNoWrap\">2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles, and the output is <span class=\"dCode dNoWrap\">7<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">c&#160;instanceof&#160;Chipmunk<\/span> does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">l&#160;instanceof&#160;Chipmunk<\/span> does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">r&#160;instanceof&#160;Chipmunk<\/span> does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Code involving <span class=\"dCode dNoWrap\">instanceof<\/span> does not compile when there is no way for it to evaluate to <span class=\"dCode dNoWrap\">true<\/span>. All of these statements could be true. A <span class=\"dCode dNoWrap\">Chipmunk<\/span> isn't <span class=\"dCode dNoWrap\">Furry<\/span>. However, the compiler recognizes that a subclass such as <span class=\"dCode dNoWrap\">ExtraFurryChipmunk<\/span> could be true and allows the code to compile.",
        "display_order": "1"
      }]
    }, {
      "id": "34369",
      "attempts_id": "392269",
      "question_id": "34369",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which statements about the following code snippet are true? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">Object&#160;o1&#160;=&#160;new&#160;Object();<\/span><br><span class=\"dCode dNoWrap\">Object&#160;o2&#160;=&#160;new&#160;Object();<\/span><br><span class=\"dCode dNoWrap\">ExecutorService&#160;service&#160;=&#160;Executors.newFixedThreadPool(10);<\/span><br><span class=\"dCode dNoWrap\">Future&#60;?&#62;&#160;f1&#160;=&#160;service.submit(()&#160;-&#62;&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;synchronized&#160;(o1)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;synchronized&#160;(o2)&#160;{&#160;System.out.println(\"Frog\");&#160;}&#160;\/\/&#160;h1<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">});<\/span><br><span class=\"dCode dNoWrap\">Future&#60;?&#62;&#160;f2&#160;=&#160;service.submit(()&#160;-&#62;&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;synchronized&#160;(o1)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;synchronized&#160;(o2)&#160;{&#160;System.out.println(\"Toad\");&#160;}&#160;\/\/&#160;h2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">});<\/span><br><span class=\"dCode dNoWrap\">f1.get();<\/span><br><span class=\"dCode dNoWrap\">f2.get();<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The code will always output <span class=\"dCode dNoWrap\">Frog<\/span> followed by <span class=\"dCode dNoWrap\">Toad<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code will always output <span class=\"dCode dNoWrap\">Toad<\/span> followed by <span class=\"dCode dNoWrap\">Frog<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code will output <span class=\"dCode dNoWrap\">Frog<\/span> and <span class=\"dCode dNoWrap\">Toad<\/span>, but the order cannot be determined ahead of time.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile because of line <span class=\"dCode dNoWrap\">h1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile because of line <span class=\"dCode dNoWrap\">h2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code may produce a deadlock at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code may produce a race condition at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "8",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles and runs without issue, so D, E, and H are incorrect. Since both tasks are submitted to the same thread executor pool, the order cannot be determined, so A and B are incorrect and C is correct. Since the threads order their resource allocation, always acquiring <span class=\"dCode dNoWrap\">o1<\/span> before <span class=\"dCode dNoWrap\">o2<\/span>, neither deadlock nor livelock would occur, so F and G are incorrect.",
        "display_order": "1"
      }]
    }, {
      "id": "34385",
      "attempts_id": "392269",
      "question_id": "34385",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "1",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following code?<br><br><span class=\"dCode dNoWrap\">LocalDateTime&#160;d&#160;=&#160;LocalDateTime.of(2015,&#160;5,&#160;10,&#160;11,&#160;22,&#160;33);<\/span><br><span class=\"dCode dNoWrap\">DateTimeFormatter&#160;f&#160;=&#160;DateTimeFormatter.ofPattern(\"hh:MM\");<\/span><br><span class=\"dCode dNoWrap\">System.out.println(d.format(f));<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">11:05<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">11:22<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">22:05<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">22:33<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">hh<\/span> is hours and <span class=\"dCode dNoWrap\">MM<\/span> is month. Tricky isn't it? You expect to find minutes there.",
        "display_order": "1"
      }]
    }, {
      "id": "34408",
      "attempts_id": "392269",
      "question_id": "34408",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What statements about the following code snippet are true? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">4:&#160;Stream&#60;String&#62;&#160;primates&#160;=&#160;Stream.of(\"gorilla\",\"lemur\",\"monkey\",\"orangutan\");<\/span><br><span class=\"dCode dNoWrap\">5:&#160;Stream&#60;String&#62;&#160;turtles&#160;=&#160;Stream.of(\"leatherback\",\"green\",\"loggerhead\");<\/span><br><span class=\"dCode dNoWrap\">6:&#160;ConcurrentMap&#60;Boolean,&#160;List&#60;String&#62;&#62;&#160;data&#160;=&#160;Stream.of(primates,turtles)<\/span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;.flatMap(s&#160;-&#62;&#160;s).parallel()<\/span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;&#160;.collect(Collectors.groupingByConcurrent(s&#160;-&#62;&#160;s.endsWith(\"n\")));<\/span><br><span class=\"dCode dNoWrap\">9:&#160;System.out.println(data.get(false).size()+\"&#160;\"+data.get(true).size());<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">2&#160;5<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">5&#160;2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line 6.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line 7.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line 8.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The <span class=\"dCode dNoWrap\">collect()<\/span> operation is always executed in a single-threaded fashion.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles and runs without issue, so C, D, E, and F are incorrect. The <span class=\"dCode dNoWrap\">collect()<\/span> operation groups the animals into those that do and do not end with the letter <span class=\"dCode dNoWrap\">n<\/span>. Since there are five animals that do not start with the letter <span class=\"dCode dNoWrap\">n<\/span> and two that do, the output is <span class=\"dCode dNoWrap\">5&#160;2<\/span>, and B is correct, making A incorrect. Since <span class=\"dCode dNoWrap\">parallel()<\/span> is applied to <span class=\"dCode dNoWrap\">flatMap()<\/span> stream, the process can execute in a multi-threaded manner assuming there are threads available, so G is incorrect.",
        "display_order": "1"
      }]
    }, {
      "id": "34378",
      "attempts_id": "392269",
      "question_id": "34378",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What are possible results of executing the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">import&#160;java.nio.file.*;<\/span><br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;DirStream&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;Path&#160;one&#160;=&#160;Paths.get(\"\/capybara\/food\",&#160;\"apples.txt\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;Path&#160;two&#160;=&#160;Paths.get(\"\/capybara\/food\",&#160;\"bananas.txt\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;try&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Files.copy(one,&#160;two);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}&#160;catch&#160;(Exception&#160;e)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}&#160;catch(IOException&#160;e)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The file is copied.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code runs without printing anything.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "This one is tricky. Remember that questions about exceptions can show up in a question that appears to be on any topic. In this case, the <span class=\"dCode dNoWrap\">catch<\/span> blocks are in the wrong order. Remember that a subclass exception must be caught before its superclass exception.",
        "display_order": "1"
      }]
    }, {
      "id": "34382",
      "attempts_id": "392269",
      "question_id": "34382",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "If the current working directory is <span class=\"dCode dNoWrap\">\/coralreef<\/span>, then what is the output of the following code?<br><br><span class=\"dSmall\"><span class=\"dCode dNoWrap\">Path&#160;userDirectory&#160;=&#160;Paths.get(\"\/coralreef\/..\/clown\/fish\").normalize();&#160;\/\/&#160;m1<\/span><br><span class=\"dCode dNoWrap\">Path&#160;pantherDirectory&#160;=&#160;userDirectory.getRoot().getParent().resolve(\"dolphin\");&#160;\/\/&#160;m2<\/span><br><span class=\"dCode dNoWrap\">System.out.println(pantherDirectory.toAbsolutePath());&#160;\/\/&#160;m3<\/span><\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">\/panther<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">\/coralreef\/dolphin<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">m1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">m2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">m3<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles without issue, so C, D, and E are incorrect. The code will throw an exception at runtime because of the chaining together of methods <span class=\"dCode dNoWrap\">getRoot().getParent()<\/span>. The root path has no parent path, so this snippet will return <span class=\"dCode dNoWrap\">null<\/span> and the operation <span class=\"dCode dNoWrap\">resolve()<\/span> will throw a <span class=\"dCode dNoWrap\">NullPointerException<\/span> at runtime; therefore F is correct and A and B are incorrect.",
        "display_order": "1"
      }]
    }, {
      "id": "34406",
      "attempts_id": "392269",
      "question_id": "34406",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of the following class?<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;C&#60;A&#62;&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;A&#160;a;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;void&#160;m(A&#160;a)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(\"a\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;void&#160;m(Object&#160;o)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(\"obj\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;C&#60;String&#62;&#160;c&#160;=&#160;new&#160;C&#60;&#62;();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;c.m(\"s\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">a<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">obj<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">s<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Due to type erasure, both methods have the same signature. Since two methods cannot have the same name and parameter list, the code does not compile.",
        "display_order": "1"
      }]
    }, {
      "id": "34374",
      "attempts_id": "392269",
      "question_id": "34374",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of the following code?<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;FourLegged&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;String&#160;walk&#160;=&#160;\"walk,\";<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;void&#160;walk()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;System.<i>out<\/i>.print(walk);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;static&#160;class&#160;BabyRhino&#160;extends&#160;FourLegged&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;@Override&#160;String&#160;walk&#160;=&#160;\"toddle,\";<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;@Override&#160;public&#160;void&#160;walk()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.<i>out<\/i>.print(walk);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;FourLegged&#160;f&#160;=&#160;new&#160;BabyRhino();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;BabyRhino&#160;b&#160;=&#160;new&#160;BabyRhino();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;f.walk();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;b.walk();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;}&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">toddle,toddle,<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">toddle,walk,<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">walk,toddle,<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">walk,walk,<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">@Override<\/span> means that a method is being overridden. The annotation is not valid on a field. The second line of <span class=\"dCode dNoWrap\">BabyRhino<\/span> does not compile since it does not reference a method.",
        "display_order": "1"
      }]
    }, {
      "id": "34372",
      "attempts_id": "392269",
      "question_id": "34372",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the answer choices produce the same output as this traditional <span class=\"dCode dNoWrap\">for<\/span> loop? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">for&#160;(String&#160;s:&#160;strings)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;if&#160;(!s.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(s);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">strings<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(p&#160;-&#62;&#160;p.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">strings<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(p&#160;-&#62;&#160;!&#160;p.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">strings<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(!&#160;p&#160;-&#62;&#160;p.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">strings.stream()<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(p&#160;-&#62;&#160;p.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">strings.stream()<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(p&#160;-&#62;&#160;!&#160;p.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">strings.stream()<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(!&#160;p&#160;-&#62;&#160;p.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Choices A, B, and C do not compile because <span class=\"dCode dNoWrap\">filter()<\/span> is not defined directly for Collections interfaces. A <span class=\"dCode dNoWrap\">Stream<\/span> must be used. Choice F does not compile because the <span class=\"dCode dNoWrap\">!<\/span> operator is in the wrong place. Choice D does compile, but it prints elements that match rather than don't match. Therefore, choice E is correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34394",
      "attempts_id": "392269",
      "question_id": "34394",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "3;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following can fill in the blank to make the code compile? (Choose all that apply.)<br><br><span class=\"dSmall\"><span class=\"dCode dNoWrap\">public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;try&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;process();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}&#160;catch&#160;(______________________)&#160;{&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span><br><span class=\"dCode dNoWrap\">private&#160;static&#160;void&#160;process()&#160;throws&#160;FileNotFoundException,&#160;IllegalArgumentException&#160;{&#160;}<\/span><\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">FileNotFoundException&#160;|&#160;IOException&#160;e<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">FileNotFoundException&#160;|&#160;InterruptedException&#160;e<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">FileNotFoundException&#160;|&#160;IllegalArgumentException&#160;e<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">IllegalArgumentException&#160;|&#160;InterruptedException&#160;e<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">IOException&#160;|&#160;InterruptedException&#160;e<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">IOException&#160;|&#160;IllegalArgumentException&#160;e<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Option A is incorrect because a subclass and superclass are not allowed to be listed in the same multi-catch. Options B, D, and E are incorrect because <span class=\"dCode dNoWrap\">InterruptedException<\/span> is a checked exception but cannot be thrown anywhere in the <span class=\"dCode dNoWrap\">try<\/span> block. Java does not allow catching checked exceptions if there is no possibility of them being thrown. Options C and F are correct because either the subclass or superclass can be caught.",
        "display_order": "1"
      }]
    }, {
      "id": "34391",
      "attempts_id": "392269",
      "question_id": "34391",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of executing the following application? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;PerfectSquares&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;ExecutorService&#160;service&#160;=&#160;Executors.newSingleThreadExecutor();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;IntStream.of(1,4,9,16,25).parallel()&#160;\/\/&#160;z1<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEachOrdered(c&#160;-&#62;&#160;service.submit(&#160;\/\/&#160;z2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;()&#160;-&#62;&#160;System.out.println(10*c)));&#160;\/\/&#160;z3<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;service.submit(()&#160;-&#62;&#160;System.out.println(\"Complete!\"));&#160;\/\/&#160;z4<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;service.shutdown();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles and outputs the five numbers, followed by <span class=\"dCode dNoWrap\">Complete!<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">z1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">z2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">z3<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">z4<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but the output cannot be determined ahead of time.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "8",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but waits forever at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles and does not throw an exception, so B, C, D, E, and G are incorrect. Even though the stream is parallel, the <span class=\"dCode dNoWrap\">forEachOrdered()<\/span> forces the methods to execute in order. Since the thread executor is single threaded, the results are guaranteed to be executed in order. Therefore, it will output the numbers in the order of the original stream followed by <span class=\"dCode dNoWrap\">Complete!<\/span>, making A the only correct answer.",
        "display_order": "1"
      }]
    }, {
      "id": "34381",
      "attempts_id": "392269",
      "question_id": "34381",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Suppose the table <span class=\"dCode dNoWrap\">animal<\/span> has five rows and this SQL statement updates all of them. What is the result of this code?<br><br><span class=\"dCode dNoWrap\">public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;throws&#160;SQLException&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;Connection&#160;conn&#160;=&#160;DriverManager.getConnection(\"jdbc:derby:zoo\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;Statement&#160;stmt&#160;=&#160;conn.createStatement();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;int&#160;result&#160;=&#160;stmt.executeQuery(\"update&#160;animal&#160;set&#160;name&#160;=&#160;name\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;System.out.println(result);<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">0<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">1<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">5<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "A <span class=\"dCode dNoWrap\">SQLException<\/span> is thrown.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "A different exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code does not compile because <span class=\"dCode dNoWrap\">executeUpdate()<\/span> should be used for an <span class=\"dCode dNoWrap\">UPDATE<\/span> statement. By contrast, <span class=\"dCode dNoWrap\">executeQuery()<\/span> returns a <span class=\"dCode dNoWrap\">ResultSet<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34373",
      "attempts_id": "392269",
      "question_id": "34373",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following are used by default? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">ResultSet.CONCUR_READ_ONLY<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">ResultSet.CONCUR_UPDATABLE<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">ResultSet.TYPE_FORWARD_ONLY<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">ResultSet.TYPE_SCROLL_INSENSITIVE<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">ResultSet.TYPE_SCROLL_SENSITIVE<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "If you call <span class=\"dCode dNoWrap\">createStatement()<\/span> without any parameters, the <span class=\"dCode dNoWrap\">ResultSet<\/span> will be <span class=\"dCode dNoWrap\">TYPE_FORWARD_ONLY<\/span> and <span class=\"dCode dNoWrap\">CONCUR_READ_ONLY<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34401",
      "attempts_id": "392269",
      "question_id": "34401",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;4;5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of executing the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">String&#160;line;<\/span><br><span class=\"dCode dNoWrap\">Console&#160;c&#160;=&#160;System.console();<\/span><br><span class=\"dCode dNoWrap\">Writer&#160;w&#160;=&#160;c.writer();<\/span><br><span class=\"dCode dNoWrap\">if&#160;((line&#160;=&#160;c.readLine())&#160;!=&#160;null)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;w.append(line);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The code runs without error but prints nothing.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code prints what the user entered.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "An <span class=\"dCode dNoWrap\">ArrayIndexOutOfBoundsException<\/span> might be thrown.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "A <span class=\"dCode dNoWrap\">NullPointerException<\/span> might be thrown.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "An <span class=\"dCode dNoWrap\">IOException<\/span> might be thrown.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Option A is correct because this code is missing a call to <span class=\"dCode dNoWrap\">flush()<\/span>. The <span class=\"dCode dNoWrap\">String<\/span> gets appended on the writer, but the output is never sent anywhere. Options D and E are also correct. If there is no console available, a <span class=\"dCode dNoWrap\">NullPointerException<\/span> is thrown. The <span class=\"dCode dNoWrap\">append()<\/span> method throws a checked <span class=\"dCode dNoWrap\">IOException<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34421",
      "attempts_id": "392269",
      "question_id": "34421",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Suppose that we have the following property files and code. Which bundle is used on lines 8 and 9?<br><br><span class=\"dCode dNoWrap\"><b>Dolphins.properties<\/b><\/span><br><span class=\"dCode dNoWrap\">name=The&#160;Dolphin<\/span><br><span class=\"dCode dNoWrap\">age=0<\/span><br><br><span class=\"dCode dNoWrap\"><b>Dolphins_de.properties<\/b><\/span><br><span class=\"dCode dNoWrap\">name=Dolly<\/span><br><span class=\"dCode dNoWrap\">age=4<\/span><br><br><span class=\"dCode dNoWrap\"><b>Dolphins_en.properties<\/b><\/span><br><span class=\"dCode dNoWrap\">name=Dolly<\/span><br><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;Locale&#160;fr&#160;=&#160;new&#160;Locale(\"fr\");<\/span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;Locale.setDefault(new&#160;Locale(\"en\",&#160;\"US\"));<\/span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;ResourceBundle&#160;b&#160;=&#160;ResourceBundle.getBundle(\"Dolphins\",&#160;fr);<\/span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;&#160;b.getString(\"name\");<\/span><br><span class=\"dCode dNoWrap\">9:&#160;&#160;&#160;&#160;b.getString(\"age\");<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Dolphins.properties<\/span> and <span class=\"dCode dNoWrap\">Dolphins.properties<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Dolphins.properties<\/span> and <span class=\"dCode dNoWrap\">Dolphins_en.properties<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Dolphins_en.properties<\/span> and <span class=\"dCode dNoWrap\">Dolphins.properties<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Dolphins_en.properties<\/span> and <span class=\"dCode dNoWrap\">Dolphins_en.properties<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Dolphins_de.properties<\/span> and <span class=\"dCode dNoWrap\">Dolphins_en.properties<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Java will use <span class=\"dCode dNoWrap\">Dolphins_en.properties<\/span> as the matching resource bundle on line 7. Since there is no match for French, the default locale is used. Line 8 finds a matching key in this file. Line 9 does not find a match in that file, and therefore it has to look higher up in the hierarchy.",
        "display_order": "1"
      }]
    }, {
      "id": "34388",
      "attempts_id": "392269",
      "question_id": "34388",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following statements are true about the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Ticket&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;private&#160;Stub&#160;stub&#160;=&#160;new&#160;Stub();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;private&#160;class&#160;Stub&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;public&#160;int&#160;number;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;public&#160;String&#160;venue;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;Ticket(int&#160;number,&#160;String&#160;venue)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;stub.number&#160;=&#160;number;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;stub.venue&#160;=&#160;venue;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;@Override&#160;public&#160;int&#160;hashCode()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;return&#160;stub.number;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;boolean&#160;equals(Object&#160;other)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(!(other&#160;instanceof&#160;Ticket))&#160;return&#160;false;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;Ticket&#160;t&#160;=&#160;(Ticket)&#160;other;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;return&#160;stub.number&#160;==&#160;t.stub.number&#160;&&&#160;stub.venue.equals(t.stub.venue);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The <span class=\"dCode dNoWrap\">Ticket<\/span> class compiles successfully.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The <span class=\"dCode dNoWrap\">equals()<\/span> method contains a compiler error.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "There is a compiler error related to the <span class=\"dCode dNoWrap\">Stub<\/span> class.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The <span class=\"dCode dNoWrap\">equals()<\/span> method is incorrect.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The <span class=\"dCode dNoWrap\">hashCode()<\/span> method is incorrect.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The <span class=\"dCode dNoWrap\">equals()<\/span> method overrides the one in <span class=\"dCode dNoWrap\">Object<\/span>.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles. Since <span class=\"dCode dNoWrap\">Stub<\/span> is an inner class, private members can be accessed by the enclosing class. <span class=\"dCode dNoWrap\">equals()<\/span> and <span class=\"dCode dNoWrap\">hashCode()<\/span> are consistent since <span class=\"dCode dNoWrap\">hashCode()<\/span> uses a subset of the fields that <span class=\"dCode dNoWrap\">equals()<\/span> uses.",
        "display_order": "1"
      }]
    }, {
      "id": "34400",
      "attempts_id": "392269",
      "question_id": "34400",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assuming that <span class=\"dCode dNoWrap\">patrons.txt<\/span> exists and it is readily accessible by the file system, what is the output of the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">File&#160;file&#160;=&#160;new&#160;File(\"patrons.txt\");<\/span><br><span class=\"dCode dNoWrap\">Path&#160;path&#160;=&#160;file.toPath().normalize();&#160;&#160;\/\/&#160;j1<\/span><br><span class=\"dCode dNoWrap\">Path.lines(path).map(s&#160;-&#62;&#160;\"Hello&#160;\"&#160;+&#160;s).forEach(System.out::println);&#160;\/\/&#160;j2<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It prints nothing at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "It prints one line for each line of the file at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">j1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">j2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code does not compile because there is no method <span class=\"dCode dNoWrap\">lines()<\/span> defined in the <span class=\"dCode dNoWrap\">Path<\/span> interface. The method is defined in the <span class=\"dCode dNoWrap\">Files<\/span> class; therefore the correct call should be <span class=\"dCode dNoWrap\">Files.lines(path)<\/span>, and D is correct, meaning that A, B, and E are incorrect. C is also incorrect since there are no other compilation problems with this code.",
        "display_order": "1"
      }]
    }, {
      "id": "34383",
      "attempts_id": "392269",
      "question_id": "34383",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following can be inserted to overload the <span class=\"dCode dNoWrap\">toddle()<\/span> method? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;LearnToWalk&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;void&#160;toddle()&#160;{}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;class&#160;BabyRhino&#160;extends&#160;LearnToWalk&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;\/\/&#160;INSERT&#160;CODE&#160;HERE<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">private&#160;void&#160;toddle(boolean&#160;fall)&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">private&#160;void&#160;Toddle(boolean&#160;fall)&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">public&#160;void&#160;toddle()&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">public&#160;void&#160;Toddle()&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">public&#160;void&#160;toddle(boolean&#160;fall)&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">public&#160;void&#160;Toddle(boolean&#160;fall)&#160;{}<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "An overloaded method must have the same name as the original, making B, D, and F incorrect. An overloaded method must also not be an override. C is an override, not an overload, because it has the same method signatures.",
        "display_order": "1"
      }]
    }, {
      "id": "34368",
      "attempts_id": "392269",
      "question_id": "34368",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which method creates an object with the current hours, minutes, and seconds?",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">new&#160;LocalDate();<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">new&#160;LocalTime();<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">LocalDate.current();<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">LocalTime.current();<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">LocalDate.now();<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">LocalTime.now();<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Options A and B are incorrect because the date and time classes have private constructors. Options C and D are incorrect because there are no such methods. Option E is incorrect because the question asks about time.",
        "display_order": "1"
      }]
    }, {
      "id": "34419",
      "attempts_id": "392269",
      "question_id": "34419",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "7;8",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assuming that an implementation of the <span class=\"dCode dNoWrap\">trackParticipants()<\/span> method is provided prior to runtime, which of the following are possible results of executing this application? (Choose all that apply.)<br><br><span class=\"dSmall\"><span class=\"dCode dNoWrap\">import&#160;java.util.*;<\/span><br><span class=\"dCode dNoWrap\">import&#160;java.util.concurrent.*;<\/span><br><span class=\"dCode dNoWrap\">import&#160;java.util.stream.*;<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;ContestApp&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;Object&#160;trackParticipants(int&#160;count)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;\/\/&#160;IMPLEMENTATION&#160;OMITTED<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;viewWinners(Future&#60;?&#62;&#160;f)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;try&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(f.get(100));&#160;\/\/&#160;a1<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}&#160;catch&#160;(Exception&#160;e)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(\"No&#160;Winner\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;throws&#160;InterruptedException,&#160;ExecutionException&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;ExecutorService&#160;service&#160;=&#160;Executors.newSingleThreadExecutor();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;final&#160;List&#60;Future&#60;?&#62;&#62;&#160;results&#160;=&#160;new&#160;ArrayList&#60;Future&#60;?&#62;&#62;();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;IntStream.range(100,&#160;105)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEach(i&#160;-&#62;&#160;results.add(<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;service.submit(p&#160;-&#62;&#160;trackParticipants(i))));&#160;\/\/&#160;a2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;results.stream().forEach(f&#160;-&#62;&#160;viewWinners(f));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;service.shutdown();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span><\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs a number five times.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs a <span class=\"dCode dNoWrap\">Boolean<\/span> value five times.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs a <span class=\"dCode dNoWrap\">null<\/span> value five times.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">No&#160;Winner<\/span> five times.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "It hangs indefinitely at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "It throws an unhandled exception at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">a1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "8",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">a2<\/span>.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "This code does not compile, so A, B, C, D, E, and F are incorrect. The <span class=\"dCode dNoWrap\">get()<\/span> method can either be called with no parameters to wait indefinitely or with two parameters to wait a specified <span class=\"dCode dNoWrap\">TimeUnit<\/span> value. Since no <span class=\"dCode dNoWrap\">TimeUnit<\/span> was specified, the code will not compile due to line <span class=\"dCode dNoWrap\">a1<\/span>, and G is correct. The code will also not compile due to line <span class=\"dCode dNoWrap\">a2<\/span>, since the <span class=\"dCode dNoWrap\">submit()<\/span> method takes only lambda expressions that match the <span class=\"dCode dNoWrap\">Callable<\/span> or <span class=\"dCode dNoWrap\">Runnable<\/span> interface and do not take an input parameter <span class=\"dCode dNoWrap\">p<\/span>. Therefore, H is also a correct answer.",
        "display_order": "1"
      }]
    }, {
      "id": "34423",
      "attempts_id": "392269",
      "question_id": "34423",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following are valid functional interfaces? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;functional&#160;interface&#160;Chew&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;void&#160;chew();<\/span><br><span class=\"dCode dNoWrap\">}<\/span><br><span class=\"dCode dNoWrap\">public&#160;interface&#160;Eat&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;default&#160;isFed()&#160;{return&#160;false;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span><br><span class=\"dCode dNoWrap\">public&#160;interface&#160;EatQuickly&#160;extends&#160;Eat&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;int&#160;eat();<\/span><br><span class=\"dCode dNoWrap\">}<\/span><br><span class=\"dCode dNoWrap\">public&#160;interface&#160;EatEvenFaster&#160;extends&#160;EatQuickly&#160;{}<\/span><br><span class=\"dCode dNoWrap\">public&#160;interface&#160;Swallow&#160;extends&#160;EatEvenFaster&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;abstract&#160;void&#160;swallow(int&#160;count);<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Eat<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">EatQuickly<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Chew<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">EatEvenFaster<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Swallow<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "None of these are valid functional interfaces.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "A is incorrect, because <span class=\"dCode dNoWrap\">Eat<\/span> does not define an abstract method. B is correct, because <span class=\"dCode dNoWrap\">EatQuickly<\/span> defines exactly one abstract method. Recall that functional interfaces can have any number of <span class=\"dCode dNoWrap\">static<\/span> or <span class=\"dCode dNoWrap\">default<\/span> methods, in this case inherited from <span class=\"dCode dNoWrap\">Eat<\/span>. C is incorrect, since there is no <span class=\"dCode dNoWrap\">functional<\/span> modifier in Java. D is correct, because <span class=\"dCode dNoWrap\">EatEvenFaster<\/span> has exactly one abstract method, inherited from <span class=\"dCode dNoWrap\">EatQuickly<\/span>. E is incorrect, because <span class=\"dCode dNoWrap\">Swallow<\/span> has a total of two abstract methods, one inherited from <span class=\"dCode dNoWrap\">EatQuickly<\/span> through <span class=\"dCode dNoWrap\">EatEvenFaster<\/span>. Finally, F is incorrect because B and D are correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34409",
      "attempts_id": "392269",
      "question_id": "34409",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assuming that the path values referenced here exist and are accessible within the file system, what is the result of executing the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">Path&#160;path&#160;=&#160;Paths.get(\"\/storage\",\"toys\").resolve(\"bird\");&#160;\/\/&#160;n1<\/span><br><span class=\"dCode dNoWrap\">Files.find(path,(p,a)&#160;-&#62;&#160;a.isDirectory())&#160;&#160;\/\/&#160;n2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.map(p&#160;-&#62;&#160;p.toRealPath(LinkOption.NOFOLLOW_LINKS).toString())&#160;\/\/&#160;n3<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.map(p&#160;-&#62;&#160;p.normalize())&#160;\/\/&#160;n4<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.forEach(System.out::print);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">n1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">n2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">n3<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">n4<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles but may not produce any output at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles and may print a list of symbolic links at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "There are two changes that would need to be made to allow the code to compile, so E and F are incorrect. First, the method <span class=\"dCode dNoWrap\">Files.find()<\/span> requires the second parameter to be a depth limit; therefore line <span class=\"dCode dNoWrap\">n2<\/span> would have to be changed to allow the code to compile, so B is a correct answer. Second, the output on line <span class=\"dCode dNoWrap\">n3<\/span> is a <span class=\"dCode dNoWrap\">String<\/span>; therefore the <span class=\"dCode dNoWrap\">normalize()<\/span> method call on line <span class=\"dCode dNoWrap\">n4<\/span> would have to be changed to allow the code to compile, so D is correct. The rest of the lines compile without issue, so A and C are incorrect.",
        "display_order": "1"
      }]
    }, {
      "id": "34415",
      "attempts_id": "392269",
      "question_id": "34415",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;4;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Given the following line of code, which of the following three statements must be true prior to execution for it to run without throwing a runtime exception?<br><br><span class=\"dCode dNoWrap\">Files.move(path1,path2,StandardCopyOption.REPLACE_EXISTING);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">path1<\/span> refers to a file or directory that exists within the file system.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">path1<\/span> refers to a file and not a directory.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">path2<\/span> refers to a file or directory that does not exist within the file system.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "If <span class=\"dCode dNoWrap\">path2<\/span> refers to a directory that exists within the file system, then it must be empty.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">path1<\/span> refers to a symbolic link.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The file system is available and path objects are not hidden by the file system.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "First, the file system must be accessible and readily available or the code will throw an exception at runtime, so F is correct. The <span class=\"dCode dNoWrap\">move()<\/span> method requires that the source file exist, else an exception will be thrown at runtime, so A is also correct. Next, the <span class=\"dCode dNoWrap\">move()<\/span> method uses the <span class=\"dCode dNoWrap\">REPLACE_EXISTING<\/span> option, so the target may or may not exist without issue, so C is incorrect. If the target does exist and is a directory, it must be empty, so D is correct. Finally, B and E are incorrect, because the source can be a file, directory, or symbolic link.",
        "display_order": "1"
      }]
    }, {
      "id": "34392",
      "attempts_id": "392269",
      "question_id": "34392",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following can you add after line 5 for the code to run without error and not produce any output? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;IntegerStream&#160;ls&#160;=&#160;IntegerStream.of(1,&#160;2,&#160;3);<\/span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;OptionalInteger&#160;opt&#160;=&#160;ls.map(n&#160;-&#62;&#160;n&#160;*&#160;10).filter(n&#160;-&#62;&#160;n&#160;&#60;&#160;5).findFirst();<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">if&#160;(opt.isPresent())&#160;System.out.println(opt.get());<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">if&#160;(opt.isPresent())&#160;System.out.println(opt.getAsInt());<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">if&#160;(opt.isPresent())&#160;System.out.println(opt.getAsInteger());<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">opt.ifPresent(System.out::println)<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "Line 5 throws an exception at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "This one is tricky. There is no such thing as an <span class=\"dCode dNoWrap\">IntegerStream<\/span> or <span class=\"dCode dNoWrap\">OptionalInteger<\/span>. The correct class names are <span class=\"dCode dNoWrap\">IntStream<\/span> and <span class=\"dCode dNoWrap\">OptionalInt<\/span>. If that were corrected, the answer would be choices B and D.",
        "display_order": "1"
      }]
    }, {
      "id": "34405",
      "attempts_id": "392269",
      "question_id": "34405",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following can fill in the blank to print just the hour, minutes, and seconds?<br><br><span class=\"dCode dNoWrap\">ResultSet&#160;rs&#160;=&#160;stmt.executeQuery(sql);<\/span><br><span class=\"dCode dNoWrap\">if&#160;(rs.next())&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;System.out.println(___________________________);<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getDate(\"d\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getLocalDate(\"d\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getLocalDateTime(\"d\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getLocalTime(\"d\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getTime(\"d\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getTimeStamp(\"d\");<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Choices B, C, and D are incorrect because they are not JDBC methods. Choice A is incorrect because it outputs just the year, month, and date. Choice F is incorrect because it outputs both the date and time.",
        "display_order": "1"
      }]
    }, {
      "id": "34403",
      "attempts_id": "392269",
      "question_id": "34403",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following code?<br><br><span class=\"dCode dNoWrap\">LocalDateTime&#160;d&#160;=&#160;LocalDateTime.of(2015,&#160;5,&#160;10,&#160;11,&#160;22,&#160;33);<\/span><br><span class=\"dCode dNoWrap\">Period&#160;p&#160;=&#160;Period.of(1,&#160;2,&#160;3);<\/span><br><span class=\"dCode dNoWrap\">d.minus(p);<\/span><br><span class=\"dCode dNoWrap\">DateTimeFormatter&#160;f&#160;=&#160;DateTimeFormatter.<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;ofLocalizedDateTime(FormatStyle.SHORT);<\/span><br><span class=\"dCode dNoWrap\">System.out.println(f.format(d));<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">3\/7\/14&#160;11:22&#160;AM<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">6\/7\/14&#160;11:22&#160;AM<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">5\/10\/15&#160;11:22&#160;AM<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">6\/10\/15&#160;11:22&#160;AM<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">d.minus(p)<\/span> isn't assigned anywhere, so the result is ignored. Since months are one-based indexes, the answer is option C.",
        "display_order": "1"
      }]
    }, {
      "id": "34410",
      "attempts_id": "392269",
      "question_id": "34410",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "3;5;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which functional interfaces complete the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;______&#160;x&#160;=&#160;a&#160;-&#62;&#160;true;<\/span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;______&#160;y&#160;=&#160;()&#160;-&#62;&#160;System.out.println();<\/span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;&#160;______&#160;z&#160;=&#160;(a,&#160;b)&#160;-&#62;&#160;a&#160;-&#160;b;<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">BiPredicate&#60;Integer,&#160;Integer&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Comparable&#60;Integer&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Comparator&#60;Integer&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Consumer&#60;Integer&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Predicate&#60;Integer&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Runnable<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Runnable&#60;Integer&#62;<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Line 6 takes a single parameter and returns a <span class=\"dCode dNoWrap\">boolean<\/span>, making it a <span class=\"dCode dNoWrap\">Predicate<\/span>. This makes choice E correct. Line 7 takes zero parameters and doesn't return anything, making it a <span class=\"dCode dNoWrap\">Runnable<\/span>. Remember that <span class=\"dCode dNoWrap\">Runnable<\/span> doesn't use generics. This makes choice F correct. Finally, line 8 takes two parameters and an <span class=\"dCode dNoWrap\">int<\/span>. Remember that you need to know about <span class=\"dCode dNoWrap\">Comparator<\/span> and <span class=\"dCode dNoWrap\">Runnable<\/span> even though they were not introduced in Java 8. Choice C is correct. <span class=\"dCode dNoWrap\">Comparable<\/span> is there to mislead you since it takes only one parameter in its single abstract method.",
        "display_order": "1"
      }]
    }, {
      "id": "34418",
      "attempts_id": "392269",
      "question_id": "34418",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following is printed out by the following code?<br><br><span class=\"dCode dNoWrap\">String&#160;d&#160;=&#160;Duration.ofDays(1);<\/span><br><span class=\"dCode dNoWrap\">String&#160;p&#160;=&#160;Period.ofDays(1);<\/span><br><br><span class=\"dCode dNoWrap\">boolean&#160;b1&#160;=&#160;d&#160;==&#160;p;<\/span><br><span class=\"dCode dNoWrap\">boolean&#160;b2&#160;=&#160;d.equals(p);<\/span><br><span class=\"dCode dNoWrap\">System.out.println(b1&#160;+&#160;\"&#160;\"&#160;+&#160;b2);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">false&#160;false<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">false&#160;true<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">true&#160;false<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">true&#160;true<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The first two lines do not compile. <span class=\"dCode dNoWrap\">Duration.of____<\/span> returns a <span class=\"dCode dNoWrap\">Duration<\/span> object rather than a <span class=\"dCode dNoWrap\">String<\/span>, similarly for <span class=\"dCode dNoWrap\">Period<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34411",
      "attempts_id": "392269",
      "question_id": "34411",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "995",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "3;5;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What of the following are true statements about working with instances of the <span class=\"dCode dNoWrap\">OutputStream<\/span> class? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "They must be buffered.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "They can be used to read input from the user.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "They can be used to write byte data to a file.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "They can be written forward and backward.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "They can be used to write character data to a file.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "They should be closed after use.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "They must be periodically flushed.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "First off, an <span class=\"dCode dNoWrap\">OutputStream<\/span> may be buffered but is not required to be buffered, so A is incorrect. The <span class=\"dCode dNoWrap\">OutputStream<\/span> class is not used to read data from the user, so B is incorrect. While the <span class=\"dCode dNoWrap\">Writer<\/span> class is more convenient for writing character data, the <span class=\"dCode dNoWrap\">OutputStream<\/span> class is capable of writing both byte and character data, so C and E are correct. Java writes <span class=\"dCode dNoWrap\">OutputStream<\/span> data in a single direction, so D is incorrect. All streams, including instances of <span class=\"dCode dNoWrap\">OutputStream<\/span>, should be closed after use, so E is correct. Finally, an <span class=\"dCode dNoWrap\">OutputStream<\/span> may be periodically flushed, but it is not required for use, so F is incorrect.",
        "display_order": "1"
      }]
    }]
  }
}