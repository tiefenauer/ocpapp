{
  "id": "392270",
  "title": null,
  "user_id": "14161",
  "course_id": "823",
  "test_id": "123",
  "section_id": null,
  "mode": "exam",
  "date_created": "2016-10-07 02:39:07",
  "lesson_location": "0",
  "status": "1",
  "category": "Book 9781119067900",
  "course_name": "OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide: <br\/>Exam 1Z0-809",
  "global_time": 0,
  "sections": {
    "directions": [{
      "id": "996",
      "test_id": "123",
      "description": "Bonus Exam 3",
      "time": "60",
      "direction": [{
        "id": "986",
        "reference_id": "996",
        "direction_for": "section",
        "data_type_id": "2",
        "data": "Section level Directions Text appears here.",
        "display_order": "0"
      }]
    }],
    "question": [{
      "id": "34453",
      "attempts_id": "392270",
      "question_id": "34453",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "8",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assume that you have an <span class=\"dCode dNoWrap\">InputStream<\/span> that supports the mark operation whose next bytes are <span class=\"dCode dNoWrap\">LEMUR<\/span>. What would be the next <span class=\"dCode dNoWrap\">char<\/span> that could be read from the stream after calling the following method on the stream, using a <span class=\"dCode dNoWrap\">count<\/span> value of <span class=\"dCode dNoWrap\">3<\/span>?<br><br><span class=\"dSmall\"><span class=\"dCode dNoWrap\">public&#160;static&#160;String&#160;pullBytes(InputStream&#160;is,&#160;int&#160;count)&#160;throws&#160;IOException&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;final&#160;StringBuffer&#160;sb&#160;=&#160;new&#160;StringBuffer();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;is.skip(2);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;if(is.markSupported())&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;is.mark(1);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;for(int&#160;i=0;&#160;i&#60;count;&#160;i++)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sb.append((char)is.read());<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;is.reset();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;sb.append(is.read()+is.read());<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;return&#160;sb.toString();<\/span><br><span class=\"dCode dNoWrap\">}<\/span><\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">L<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">E<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">M<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">U<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">R<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "8",
        "data": [{
          "data_type_id": "2",
          "data": "The result cannot be determined with the information given.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The key to understanding this problem is to notice that the <span class=\"dCode dNoWrap\">mark()<\/span> limit was set to only <span class=\"dCode dNoWrap\">1<\/span>, and with <span class=\"dCode dNoWrap\">count<\/span> being set to <span class=\"dCode dNoWrap\">3<\/span>, we are reading past our mark limit. The result is that the mark position may be invalidated at runtime, although it also may not be. Since the behavior is dependent on the particular implementation of <span class=\"dCode dNoWrap\">InputStream<\/span>, the answer is H. If the mark is not invalidated, though, the first <span class=\"dCode dNoWrap\">skip(2)<\/span> operation would move past <span class=\"dCode dNoWrap\">LE<\/span>. Since we are told the stream supports the mark operation, three bytes, <span class=\"dCode dNoWrap\">MUR<\/span>, would be read before being reset back to the position after the <span class=\"dCode dNoWrap\">E<\/span>. An additional two bytes, <span class=\"dCode dNoWrap\">MU<\/span>, would be read, leading to the next byte read after the function call being <span class=\"dCode dNoWrap\">R<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34470",
      "attempts_id": "392270",
      "question_id": "34470",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "November 6, 2016, is the date that clocks fall back from daylight saving time. What is the output of the following?<br><br><span class=\"dCode dNoWrap\">LocalDate&#160;date&#160;=&#160;LocalDate.of(2016,&#160;Month.NOVEMBER,&#160;6);<\/span><br><span class=\"dCode dNoWrap\">LocalTime&#160;time&#160;=&#160;LocalTime.of(1,&#160;30);<\/span><br><span class=\"dCode dNoWrap\">ZoneId&#160;zone&#160;=&#160;ZoneId.of(\"US\/Eastern\");<\/span><br><span class=\"dCode dNoWrap\">ZonedDateTime&#160;dateTime1&#160;=&#160;ZonedDateTime.of(date,&#160;time,&#160;zone);<\/span><br><span class=\"dCode dNoWrap\">ZonedDateTime&#160;dateTime2&#160;=&#160;dateTime1.plus(1,&#160;ChronoUnit.HOURS);<\/span><br><br><span class=\"dCode dNoWrap\">long&#160;hours&#160;=&#160;ChronoUnit.HOURS.between(dateTime1,&#160;dateTime2);<\/span><br><span class=\"dCode dNoWrap\">int&#160;clock1&#160;=&#160;dateTime1.getHour();<\/span><br><span class=\"dCode dNoWrap\">int&#160;clock2&#160;=&#160;dateTime2.getHour();<\/span><br><span class=\"dCode dNoWrap\">System.out.println(hours&#160;+&#160;\",\"&#160;+&#160;clock1&#160;+&#160;\",\"&#160;+&#160;clock2);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">0,1,1<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">0,1,2<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">1,1,1<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">1,1,2<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">dateTime1<\/span> is <span class=\"dCode dNoWrap\">2016<\/span>&#8211;<span class=\"dCode dNoWrap\">11<\/span>&#8211;<span class=\"dCode dNoWrap\">06T01:30<\/span>&#8211;<span class=\"dCode dNoWrap\">04:00[US\/Eastern]<\/span> and <span class=\"dCode dNoWrap\">dateTime2<\/span> is <span class=\"dCode dNoWrap\">2016<\/span>&#8211;<span class=\"dCode dNoWrap\">11<\/span>&#8211;<span class=\"dCode dNoWrap\">06T01:30<\/span>&#8211;<span class=\"dCode dNoWrap\">05:00[US\/Eastern]<\/span>. While the hours are the same, the time zone offset is different, making it change from 5:30 GMT to 6:30 GMT.",
        "display_order": "1"
      }]
    }, {
      "id": "34449",
      "attempts_id": "392270",
      "question_id": "34449",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which resources are closed by the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">Connection&#160;conn&#160;=&#160;DriverManager.getConnection(\"jdbc:derby:zoo\");<\/span><br><span class=\"dCode dNoWrap\">Statement&#160;stmt&#160;=&#160;conn.createStatement();<\/span><br><span class=\"dCode dNoWrap\">ResultSet&#160;rs&#160;=&#160;stmt.executeQuery(\"select&#160;count(*)&#160;from&#160;animal\");<\/span><br><span class=\"dCode dNoWrap\">stmt.close();<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Connection<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">ResultSet<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Statement<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "None of the resources are closed.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Closing a <span class=\"dCode dNoWrap\">Statement<\/span> automatically closes the <span class=\"dCode dNoWrap\">ResultSet<\/span> as well, making choices B and C correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34459",
      "attempts_id": "392270",
      "question_id": "34459",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assume that all bundles mentioned in the answers exist and define the same keys. Which one will be used to find the key in line 8?<br><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;Locale.setDefault(Locale.get(\"en\",&#160;\"US\"));<\/span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;ResourceBundle&#160;b&#160;=&#160;new&#160;ResourceBundle(\"Dolphins\");<\/span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;&#160;b.getString(\"name\");<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Dolphins.properties<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Dolphins_fr.java<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Dolphins_fr.properties<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Whales.properties<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Whales_en_US.properties<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">Locale<\/span> should use a constructor or builder and <span class=\"dCode dNoWrap\">ResourceBundle<\/span> should use a factory.",
        "display_order": "1"
      }]
    }, {
      "id": "34438",
      "attempts_id": "392270",
      "question_id": "34438",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "4;5;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following are stored in a <span class=\"dCode dNoWrap\">Duration<\/span> object?",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "Year",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "Month",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "Day",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "Hour",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "Minute",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "Second",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Remember that <span class=\"dCode dNoWrap\">Duration<\/span> uses hours\/minutes\/seconds, and <span class=\"dCode dNoWrap\">Period<\/span> uses years\/months\/days for measures.",
        "display_order": "1"
      }]
    }, {
      "id": "34460",
      "attempts_id": "392270",
      "question_id": "34460",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following are true? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;l1&#160;=&#160;Arrays.asList();<\/span><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;l2&#160;=&#160;Arrays.asList(1,&#160;2,&#160;3);<\/span><br><span class=\"dCode dNoWrap\">List&#60;Integer&#62;&#160;l3&#160;=&#160;Arrays.asList(4,&#160;5,&#160;6);<\/span><br><br><span class=\"dCode dNoWrap\">Stream.of(l1,&#160;l2,&#160;l3)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;.limit(2)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;.peek(System.out::println)&#160;\/\/&#160;peek&#160;1<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;.flatMap(x&#160;-&#62;&#160;x.stream())<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;.peek(System.out::println)&#160;\/\/&#160;peek&#160;2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;.map(x&#160;-&#62;&#160;x&#160;+&#160;1)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;.forEach(System.out::println);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "Zero lines are generated by the line marked by <span class=\"dCode dNoWrap\">peek&#160;1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "Two lines are generated by the line marked by <span class=\"dCode dNoWrap\">peek&#160;1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "Three lines are generated by the line marked by <span class=\"dCode dNoWrap\">peek&#160;1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "Zero lines are generated by the line marked by <span class=\"dCode dNoWrap\">peek<\/span> <span class=\"dCode dNoWrap\">2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "Two lines are generated by the line marked by <span class=\"dCode dNoWrap\">peek&#160;2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "Three lines are generated by the line marked by <span class=\"dCode dNoWrap\">peek&#160;2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "8",
        "data": [{
          "data_type_id": "2",
          "data": "The code throws an exception.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The <span class=\"dCode dNoWrap\">Stream<\/span> starts out containing three lists. Since we want to limit the size to <span class=\"dCode dNoWrap\">2<\/span>, the third list is ignored. This means <span class=\"dCode dNoWrap\">peek&#160;2<\/span> is run twice&#8212;for <span class=\"dCode dNoWrap\">l1<\/span> and <span class=\"dCode dNoWrap\">l2<\/span>, making choice B correct. Then <span class=\"dCode dNoWrap\">flatMap()<\/span> runs, getting rid of the empty list and flattening out the three elements of <span class=\"dCode dNoWrap\">l2<\/span>. Now <span class=\"dCode dNoWrap\">peek&#160;2<\/span> sees these three elements, making choice F correct. Finally, each of the three elements has 1 added to it, and those numbers (<span class=\"dCode dNoWrap\">2<\/span>, <span class=\"dCode dNoWrap\">3<\/span>, and <span class=\"dCode dNoWrap\">4<\/span>) are printed by the <span class=\"dCode dNoWrap\">forEach()<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34467",
      "attempts_id": "392270",
      "question_id": "34467",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following?<br><br><span class=\"dCode dNoWrap\">Stream&#60;String&#62;&#160;s&#160;=&#160;Stream.empty();<\/span><br><span class=\"dCode dNoWrap\">Stream&#60;String&#62;&#160;s2&#160;=&#160;Stream.empty();<\/span><br><span class=\"dCode dNoWrap\">Predicate&#60;String&#62;&#160;condition&#160;=&#160;b&#160;-&#62;&#160;b.startsWith(\"c\");<\/span><br><span class=\"dCode dNoWrap\">Map&#60;Boolean,&#160;List&#60;String&#62;&#62;&#160;p&#160;=&#160;s.collect(<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;Collectors.partitioningBy(condition));<\/span><br><span class=\"dCode dNoWrap\">Map&#60;Boolean,&#160;List&#60;String&#62;&#62;&#160;g&#160;=&#160;s2.collect(<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;Collectors.groupingBy(condition));<\/span><br><span class=\"dCode dNoWrap\">System.out.println(p&#160;+&#160;\"&#160;\"&#160;+&#160;g);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{}&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{}&#160;{false=[],&#160;true=[]}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{false=[],&#160;true=[]}&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">{false=[],&#160;true=[]}&#160;{false=[],&#160;true=[]}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "An exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "This question is really tricky. Did we catch you? The code<span class=\"dCode dNoWrap\">&#160;b&#160;-&#62;&#160;b.startsWith(\"c\")<\/span> can be passed directly to <span class=\"dCode dNoWrap\">partitioningBy()<\/span> or <span class=\"dCode dNoWrap\">groupingBy()<\/span>. Java will infer the right type and pass a <span class=\"dCode dNoWrap\">Predicate<\/span> to the former and a <span class=\"dCode dNoWrap\">Function<\/span> to the later. However, that's not what happens in this example. By actually creating a <span class=\"dCode dNoWrap\">Predicate<\/span> variable, the type has to match and the call to <span class=\"dCode dNoWrap\">groupingBy()<\/span> does not compile.",
        "display_order": "1"
      }]
    }, {
      "id": "34446",
      "attempts_id": "392270",
      "question_id": "34446",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "4;5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which functional interfaces complete the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">_______&#160;x&#160;=&#160;LocalDate::<i>now<\/i>;<\/span><br><span class=\"dCode dNoWrap\">_______&#160;y&#160;=&#160;Files::<i>exists<\/i>;<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Consumer&#60;LocalDate&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Consumer&#60;Path&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Predicate&#60;LocalDate&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Predicate&#60;Path&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Supplier&#60;LocalDate&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Supplier&#60;Path&#62;<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The first line uses a static method reference to create a <span class=\"dCode dNoWrap\">LocalDate<\/span> without taking any parameters. Therefore, option E is correct because it supplies <span class=\"dCode dNoWrap\">LocalDate<\/span> objects. The second line uses a static method reference that takes one parameter and returns a <span class=\"dCode dNoWrap\">boolean<\/span>. Therefore, option D is correct. Notice that you need to understand method references on questions that aren't specifically about functional programming.",
        "display_order": "1"
      }]
    }, {
      "id": "34468",
      "attempts_id": "392270",
      "question_id": "34468",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "1",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of the following code?<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Sorting&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;static&#160;class&#160;Lizard&#160;implements&#160;Comparable&#60;Lizard&#62;&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;int&#160;weight;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;Lizard(int&#160;w)&#160;{&#160;weight&#160;=&#160;w;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;public&#160;int&#160;compareTo(Lizard&#160;l)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return&#160;weight&#8212;l.weight;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;public&#160;String&#160;toString()&#160;{&#160;return&#160;\"\"&#160;+&#160;weight;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;List&#60;Lizard&#62;&#160;list&#160;=&#160;new&#160;ArrayList&#60;&#62;();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;list.add(new&#160;Lizard(5));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;list.add(new&#160;Lizard(4));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;list.add(new&#160;Lizard(7));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;Collections.sort(list);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(list);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">[4,&#160;5,&#160;7]<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">[5,&#160;4,&#160;7]<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">[7,&#160;5,&#160;4]<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">Lizard<\/span> correctly implements <span class=\"dCode dNoWrap\">Comparable<\/span>. The <span class=\"dCode dNoWrap\">Lizard<\/span> objects are sorted by their numeric field.",
        "display_order": "1"
      }]
    }, {
      "id": "34482",
      "attempts_id": "392270",
      "question_id": "34482",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "There are currently 100 rows in the table <span class=\"dCode dNoWrap\">species<\/span> before inserting a new row. What is the output of the following code?<br><br><span class=\"dCode dNoWrap\">try&#160;(Connection&#160;conn&#160;=&#160;DriverManager.getConnection(\"jdbc:derby:zoo\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;Statement&#160;stmt&#160;=&#160;conn.createStatement())&#160;{<\/span><br><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;ResultSet&#160;rs&#160;=&#160;stmt.executeQuery(\"select&#160;count(*)&#160;from&#160;species\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.next();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;int&#160;num&#160;=&#160;stmt.executeUpdate(\"INSERT&#160;INTO&#160;species&#160;VALUES&#160;(3,&#160;'Ant',&#160;.05)\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs&#160;=&#160;stmt.executeQuery(\"select&#160;count(*)&#160;from&#160;species\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.next();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;System.out.println(rs.getInt(1));<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">100<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">101<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "A <span class=\"dCode dNoWrap\">SQLException<\/span> is thrown.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "A different exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "This code is correct. It starts by performing a query and ignoring the result. It then inserts a row, making 101 rows now in the table. Then it does another query and reads the result. Therefore, the answer is choice B.",
        "display_order": "1"
      }]
    }, {
      "id": "34461",
      "attempts_id": "392270",
      "question_id": "34461",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;3;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following are true? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">private&#160;static&#160;void&#160;magic(Stream&#60;Integer&#62;&#160;s)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;Optional&#160;o&#160;=&#160;s.filter(x&#160;-&#62;&#160;x&#160;&#60;&#160;5).max((x,&#160;y)&#160;-&#62;&#160;x&#160;-&#160;y);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;System.out.println(o.get());<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">magic(Stream.empty());<\/span> runs infinitely.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">magic(Stream.empty());<\/span> throws an exception.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">magic(Stream.iterate(1,&#160;x&#160;-&#62;&#160;x++));<\/span> runs infinitely.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">magic(Stream.iterate(1,&#160;x&#160;-&#62;&#160;x++));<\/span> throws an exception.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">magic(Stream.of(5,&#160;10));<\/span> runs infinitely.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">magic(Stream.of(5,&#160;10));<\/span> throws an exception.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The method does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Calling <span class=\"dCode dNoWrap\">get()<\/span> on an empty <span class=\"dCode dNoWrap\">Optional<\/span> causes an exception to be thrown, making options B and F correct. Option C is correct because the infinite stream is not made finite by the intermediate <span class=\"dCode dNoWrap\">filter()<\/span> operation. Therefore the call to <span class=\"dCode dNoWrap\">max()<\/span> never terminates.",
        "display_order": "1"
      }]
    }, {
      "id": "34485",
      "attempts_id": "392270",
      "question_id": "34485",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assuming the current directory is <span class=\"dCode dNoWrap\">\/home<\/span> and the directories and files referenced by the program exist, what is true about the following code snippet? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">Path&#160;path1&#160;=&#160;Paths.get(\"\/lemur\/habitat\/.\/party.txt\");<\/span><br><span class=\"dCode dNoWrap\">Path&#160;path2&#160;=&#160;path1.subpath(1,4).toAbsolutePath();<\/span><br><span class=\"dCode dNoWrap\">System.out.println(Files.lines(path2)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.flatMap(p&#160;-&#62;&#160;Stream.of(p.split(\",\")))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(s&#160;-&#62;&#160;s.trim().length()&#62;0)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.allMatch(s&#160;-&#62;&#160;s.length()&#62;3));<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It will access the file <span class=\"dCode dNoWrap\">\/lemur\/habitat\/party.txt<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "It will access the file <span class=\"dCode dNoWrap\">\/habitat\/party.txt<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "It will access the file <span class=\"dCode dNoWrap\">\/home\/habitat\/party.txt<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "If the <span class=\"dCode dNoWrap\">String<\/span> value <span class=\"dCode dNoWrap\">,,,<\/span> is contained within the file, it will definitely print <span class=\"dCode dNoWrap\">false<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "If the <span class=\"dCode dNoWrap\">String<\/span> value <span class=\"dCode dNoWrap\">,hat,<\/span> is contained within the file, it will definitely print <span class=\"dCode dNoWrap\">false<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "It will always print <span class=\"dCode dNoWrap\">false<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles without issue, so G is incorrect. First, we need to know what <span class=\"dCode dNoWrap\">path2<\/span> resolves to. The value <span class=\"dCode dNoWrap\">path1.subpath(1,4)<\/span> returns <span class=\"dCode dNoWrap\">habitat\/.\/party.txt<\/span>, which we join to the current directory <span class=\"dCode dNoWrap\">\/home<\/span> with the <span class=\"dCode dNoWrap\">toAbsolutePath()<\/span> method in order to see that we are accessing the file <span class=\"dCode dNoWrap\">\/home\/habitat\/party.txt<\/span>, so B is correct and A and C are incorrect. Next, the code returns <span class=\"dCode dNoWrap\">true<\/span> if all of the non-empty strings separated by commas are greater than three characters long. That means a value of <span class=\"dCode dNoWrap\">,,,<\/span> may still return <span class=\"dCode dNoWrap\">true<\/span>, since all of the empty strings are filtered out, so D is incorrect. The value <span class=\"dCode dNoWrap\">,hat,<\/span> on the other hand, is definitely not greater than three characters, and it will cause the result to be <span class=\"dCode dNoWrap\">false<\/span>, so E is correct. Finally, F is incorrect, since there is nothing that guarantees the method will always return <span class=\"dCode dNoWrap\">false<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34451",
      "attempts_id": "392270",
      "question_id": "34451",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following changes must be made in order for the following code to print out <span class=\"dCode dNoWrap\">2<\/span>? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">import&#160;java.util.*;<\/span><br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Panda&#160;&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;String&#160;name;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;Panda(String&#160;name)&#160;{&#160;this.name&#160;=&#160;name;&#160;}<\/span><br><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;Set&#160;s&#160;=&#160;new&#160;TreeSet&#60;&#62;();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;s.add(new&#160;Panda(\"Bao&#160;Bao\"));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;s.add(new&#160;Panda(\"Mei&#160;Xiang\"));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;s.add(new&#160;Panda(\"Bao&#160;Bao\"));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(s.size());<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "Have class implement <span class=\"dCode dNoWrap\">Comparable<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "Have class implement <span class=\"dCode dNoWrap\">Comparator<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "Override <span class=\"dCode dNoWrap\">compare()<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "Override <span class=\"dCode dNoWrap\">compareTo()<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "Override <span class=\"dCode dNoWrap\">hashCode()<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "None of the above; it is impossible to output <span class=\"dCode dNoWrap\">2<\/span>.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">TreeSet<\/span> stores its elements in sorted order and requires the objects to implement <span class=\"dCode dNoWrap\">Comparable<\/span> (or pass in a <span class=\"dCode dNoWrap\">Comparator<\/span>). Other sets call <span class=\"dCode dNoWrap\">equals()<\/span> to determine if the element is a duplicate. <span class=\"dCode dNoWrap\">TreeSet<\/span> does not since it already knows the order from calling <span class=\"dCode dNoWrap\">compareTo()<\/span>. The exam expects you to know the more common cases, which is why <span class=\"dCode dNoWrap\">equals()<\/span> is not a choice in this question.",
        "display_order": "1"
      }]
    }, {
      "id": "34480",
      "attempts_id": "392270",
      "question_id": "34480",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which statements are true about the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;interface&#160;UsesBeak&#160;{}<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Mammal&#160;{}<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Bird&#160;implements&#160;UsesBeak&#160;{}<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Platypus&#160;extends&#160;Mammal&#160;implements&#160;UsesBeak&#160;{}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Platypus<\/span> has-a <span class=\"dCode dNoWrap\">Beak<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Bird<\/span> is-a <span class=\"dCode dNoWrap\">UsesBeak<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Bird<\/span> is-a <span class=\"dCode dNoWrap\">Mammal<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Mammal<\/span> has-a <span class=\"dCode dNoWrap\">Bird<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Platypus<\/span> is-a <span class=\"dCode dNoWrap\">Bird<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Platypus<\/span> is-a <span class=\"dCode dNoWrap\">Mammal<\/span>.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "First off, if a class implements an interface, then it is-a instance of that interface. In this example, none of the classes or interfaces contain any variables, so there are no has-a relationships and A and D can be automatically eliminated. B is correct, since a <span class=\"dCode dNoWrap\">Bird<\/span> is-a instance of the <span class=\"dCode dNoWrap\">UsesBeak<\/span> interface. C is incorrect, since <span class=\"dCode dNoWrap\">Bird<\/span> and <span class=\"dCode dNoWrap\">Mammal<\/span>, while they both implement <span class=\"dCode dNoWrap\">UsesBeak<\/span>, are not related directly via inheritance. E is incorrect, because a <span class=\"dCode dNoWrap\">Platypus<\/span> does not inherit from <span class=\"dCode dNoWrap\">Bird<\/span>. F is correct, because a <span class=\"dCode dNoWrap\">Platypus<\/span> is a subclass of <span class=\"dCode dNoWrap\">Mammal<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34465",
      "attempts_id": "392270",
      "question_id": "34465",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is true of the following code?<br><br><span class=\"dCode dNoWrap\">import&#160;java.io.*;<\/span><br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;CustomException&#160;extends&#160;IOException&#160;implements&#160;AutoCloseable&#160;{<\/span><br><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;@Override<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;void&#160;close()&#160;throws&#160;CustomException&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;throw&#160;new&#160;CustomException&#160;();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;throws&#160;Exception&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;try&#160;(CustomException&#160;c&#160;=&#160;new&#160;CustomException())&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;throw&#160;new&#160;CustomException();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code runs without throwing <span class=\"dCode dNoWrap\">CustomException<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code throws <span class=\"dCode dNoWrap\">CustomException<\/span> but no suppressed exceptions.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code throws <span class=\"dCode dNoWrap\">CustomException<\/span> and <span class=\"dCode dNoWrap\">CustomException<\/span> as suppressed exceptions.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code throws <span class=\"dCode dNoWrap\">CustomException<\/span> and also a <span class=\"dCode dNoWrap\">CustomException<\/span> as a suppressed exception.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "While it is odd to have an exception class implement <span class=\"dCode dNoWrap\">AutoCloseable<\/span>, it is legal. The body of the <span class=\"dCode dNoWrap\">try<\/span> block throws <span class=\"dCode dNoWrap\">CustomException<\/span>. Then the try-with-resources block runs, calling <span class=\"dCode dNoWrap\">close<\/span>, which also throws an exception. This is the suppressed exception.",
        "display_order": "1"
      }]
    }, {
      "id": "34444",
      "attempts_id": "392270",
      "question_id": "34444",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "1",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following method if <span class=\"dCode dNoWrap\">props<\/span> contains <span class=\"dCode dNoWrap\">{veggies=brontosaurus,&#160;meat=velociraptor}<\/span>?<br><br><span class=\"dCode dNoWrap\">private&#160;static&#160;void&#160;print(Properties&#160;props)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;System.out.println(props.getProperty(\"veggies\",&#160;\"none\")<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;+&#160;\"&#160;\"&#160;+&#160;props.&#160;getProperty&#160;(\"omni\",&#160;\"none\"));<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">brontosaurus&#160;none<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">brontosaurus&#160;null<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">none&#160;none<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">none&#160;null<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The <span class=\"dCode dNoWrap\">Properties<\/span> class defines a <span class=\"dCode dNoWrap\">get()<\/span> method that does not allow for a default value. It also has <span class=\"dCode dNoWrap\">getProperty()<\/span> method, which returns the default value if the key is not provided. Since <span class=\"dCode dNoWrap\">veggies<\/span> is not in the properties, the default value is used.",
        "display_order": "1"
      }]
    }, {
      "id": "34484",
      "attempts_id": "392270",
      "question_id": "34484",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following code?<br><br><span class=\"dCode dNoWrap\">LocalDate&#160;date&#160;=&#160;LocalDate.of(2018,&#160;Month.APRIL,&#160;30);<\/span><br><span class=\"dCode dNoWrap\">date&#160;=&#160;date.plusDays(2);<\/span><br><span class=\"dCode dNoWrap\">date&#160;=&#160;date.plusYears(3);<\/span><br><span class=\"dCode dNoWrap\">System.out.println(date.getYear()&#160;+&#160;\"&#160;\"<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;+&#160;date.getMonth()&#160;+&#160;\"&#160;\"&#160;+&#160;date.getDayOfMonth());<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2018&#160;APRIL&#160;2<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2018&#160;APRIL&#160;30<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2018&#160;MAY&#160;2<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2021&#160;APRIL&#160;2<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2021&#160;APRIL&#160;30<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2021&#160;MAY&#160;2<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The date starts out as April 30, 2018. Adding two days takes us to May 2, 2018. Then adding three years brings us to May 2, 2021, making option F the correct answer.",
        "display_order": "1"
      }]
    }, {
      "id": "34469",
      "attempts_id": "392270",
      "question_id": "34469",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "1",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following can fill in the blank to print just the month, date, and year?<br><br><span class=\"dCode dNoWrap\">ResultSet&#160;rs&#160;=&#160;stmt.executeQuery(sql);<\/span><br><span class=\"dCode dNoWrap\">if&#160;(rs.next())&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;System.out.println(___________________________);<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getDate(\"d\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getLocalDate(\"d\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getLocalDateTime(\"d\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getLocalTime(\"d\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getTime(\"d\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getTimeStamp(\"d\");<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Choices B, C, and D are incorrect because they are not JDBC methods. Choice E is incorrect because it outputs just the hours, minutes, and seconds. Choice F is incorrect because it outputs both the date and time.",
        "display_order": "1"
      }]
    }, {
      "id": "34454",
      "attempts_id": "392270",
      "question_id": "34454",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Suppose the directory <span class=\"dCode dNoWrap\">c:\\temp<\/span> exists, but no subdirectories of it exist. Which line of code would be the best way to create the directory <span class=\"dCode dNoWrap\">c:\\temp\\book\\java<\/span>?",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">File.mkdir(\"c:\\\\temp\\\\book\\\\java\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">File.mkdirs(\"c:\\\\temp\\\\book\\\\java\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Files.mkdir(\"c:\\\\temp\\\\book\\\\java\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Files.mkdirs(\"c:\\\\temp\\\\book\\\\java\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">new&#160;File(\"c:\\\\temp\\\\book\\\\java\").mkdir();<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">new&#160;File(\"c:\\\\temp\\\\book\\\\java\").mkdirs();<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The <span class=\"dCode dNoWrap\">java.io.File<\/span> class does not include <span class=\"dCode dNoWrap\">static<\/span> methods for creating directories, so A and B are incorrect. Next, <span class=\"dCode dNoWrap\">Files<\/span> is an NIO.2 class that includes <span class=\"dCode dNoWrap\">createDirectory()<\/span> and <span class=\"dCode dNoWrap\">createDirectories()<\/span> but not <span class=\"dCode dNoWrap\">mkdir()<\/span>; therefore C and D are incorrect. Option E would work if <span class=\"dCode dNoWrap\">c:\\temp\\book<\/span> existed. Since multiple directories need to be created, we need to call <span class=\"dCode dNoWrap\">mkdirs()<\/span> to create the intermediate directories as well.",
        "display_order": "1"
      }]
    }, {
      "id": "34463",
      "attempts_id": "392270",
      "question_id": "34463",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;4;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following methods are overrides of the methods implemented in <span class=\"dCode dNoWrap\">java.lang.Object<\/span>? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">public&#160;boolean&#160;equals(String&#160;string)&#160;{&#160;return&#160;false;&#160;}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">public&#160;boolean&#160;equals(Object&#160;obj)&#160;{&#160;return&#160;false;&#160;}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">public&#160;int&#160;hashcode()&#160;{&#160;return&#160;1;&#160;}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">public&#160;int&#160;hashCode()&#160;{&#160;return&#160;1;&#160;}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">public&#160;String&#160;asString()&#160;{&#160;return&#160;\"\";&#160;}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">public&#160;String&#160;toString()&#160;{&#160;return&#160;\"\";&#160;}<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">equals()<\/span> takes an <span class=\"dCode dNoWrap\">Object<\/span> in <span class=\"dCode dNoWrap\">java.lang.Object<\/span>. Any overrides must do the same. <span class=\"dCode dNoWrap\">hashCode()<\/span> has a capital <span class=\"dCode dNoWrap\">c<\/span> following the Java convention of CamelCase in method names. Option A is an overload and not an override. Options C and E are methods that do not exist in <span class=\"dCode dNoWrap\">java.lang.Object<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34442",
      "attempts_id": "392270",
      "question_id": "34442",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the answer choices are true given the following? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">2016<\/span>&#8211;<span class=\"dCode dNoWrap\">08<\/span>&#8211;<span class=\"dCode dNoWrap\">28T05:00<\/span>&#8211;<span class=\"dCode dNoWrap\">07:00<\/span><br><span class=\"dCode dNoWrap\">2016<\/span>&#8211;<span class=\"dCode dNoWrap\">08<\/span>&#8211;<span class=\"dCode dNoWrap\">28T05:00<\/span>&#8211;<span class=\"dCode dNoWrap\">06:00<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The first date\/time is earlier.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The second date\/time is earlier.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "Both date\/times are the same.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The date\/times are one hour apart.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The date\/times are three hours apart.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The date\/times are five hours apart.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "When dealing with time zones, it is best to convert to GMT first by subtracting the time zone. The first date\/time is 12:00 GMT and the second is 11:00 GMT (using a 24-hour clock). Therefore, the first one is later by one hour.",
        "display_order": "1"
      }]
    }, {
      "id": "34476",
      "attempts_id": "392270",
      "question_id": "34476",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following can fill in the blank correctly? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">ResultSet&#160;rs&#160;=&#160;stmt.executeQuery(\"select&#160;name&#160;from&#160;animal\");<\/span><br><span class=\"dCode dNoWrap\">if&#160;(rs.next())&#160;{<\/span><br><span class=\"dCode dNoWrap\">_______________________________<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getString(0);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getString(1);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rs.getString(\"name\");<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "None of the above&#8212;the code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "In a <span class=\"dCode dNoWrap\">ResultSet<\/span>, columns are indexed starting with 1, not 0. Getting the column-by-column number or name is allowed.",
        "display_order": "1"
      }]
    }, {
      "id": "34477",
      "attempts_id": "392270",
      "question_id": "34477",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of executing the following application? (Choose all that apply.)<br><br><span class=\"dSmall\"><span class=\"dCode dNoWrap\">import&#160;java.util.concurrent.*;<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;CheckWeather&#160;extends&#160;RecursiveTask&#160;{&#160;\/\/&#160;j1<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;private&#160;int&#160;start;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;private&#160;int&#160;end;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;CheckWeather(int&#160;start,&#160;int&#160;end)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;this.start&#160;=&#160;start;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;this.end&#160;=&#160;end;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;protected&#160;void&#160;compute()&#160;{&#160;\/\/&#160;j2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;if&#160;((end-start)&#60;2)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;else&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int&#160;middle&#160;=&#160;start&#160;+&#160;((end&#8212;start)&#160;\/&#160;2);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;invokeAll(new&#160;CheckWeather(start,&#160;middle),&#160;new&#160;CheckWeather(middle,&#160;end));&#160;\/\/&#160;j3<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;ForkJoinTask&#160;task&#160;=&#160;new&#160;CheckWeather(0,&#160;4);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;ForkJoinPool&#160;pool&#160;=&#160;new&#160;ForkJoinPool();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;pool.invoke(task);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span><\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles and runs without issue.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of <span class=\"dCode dNoWrap\">j1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of <span class=\"dCode dNoWrap\">j2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of <span class=\"dCode dNoWrap\">j3<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but hangs at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The program extends <span class=\"dCode dNoWrap\">RecursiveTask<\/span>, not <span class=\"dCode dNoWrap\">RescursiveAction<\/span>; therefore the <span class=\"dCode dNoWrap\">compute()<\/span> method must return a value. Since the <span class=\"dCode dNoWrap\">compute()<\/span> method has a return type of <span class=\"dCode dNoWrap\">void<\/span>, line <span class=\"dCode dNoWrap\">j2<\/span> does not compile and C is the only correct answer. Note that if the return type of the <span class=\"dCode dNoWrap\">compute()<\/span> were corrected to have a non-<span class=\"dCode dNoWrap\">void<\/span> return type, the body would also have to be changed to return a value.",
        "display_order": "1"
      }]
    }, {
      "id": "34471",
      "attempts_id": "392270",
      "question_id": "34471",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;5;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following are valid <span class=\"dCode dNoWrap\">Callable<\/span> expressions? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">()&#160;-&#62;&#160;-1<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">()&#160;-&#62;&#160;()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">()&#160;-&#62;&#160;return&#160;102.4<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">(int&#160;x)&#160;-&#62;&#160;19*x<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">()&#160;-&#62;&#160;{return&#160;null;}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">()&#160;-&#62;&#160;10\/0<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">()&#160;-&#62;&#160;{return&#160;1;&#160;System.out.println(\"Hippo\");}<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "A <span class=\"dCode dNoWrap\">Callable<\/span> lambda expression takes no values and returns a generic type; therefore A, E, and F are correct. D is incorrect because it takes an input parameter. Finally, B, C, and G are each invalid lambda expressions.",
        "display_order": "1"
      }]
    }, {
      "id": "34456",
      "attempts_id": "392270",
      "question_id": "34456",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "5;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following statements about <span class=\"dCode dNoWrap\">Path.equals()<\/span> and <span class=\"dCode dNoWrap\">Files.isSameFile()<\/span> are correct? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "Both methods have the exact same function.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Path.equals()<\/span> always throws an exception if either <span class=\"dCode dNoWrap\">Path<\/span> does not exist.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Files.isSameFile()<\/span> always throws an exception if either <span class=\"dCode dNoWrap\">Path<\/span> does not exist.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Path.equals()<\/span> requires a checked exception to be handled by the process that calls it.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Files.isSameFile()<\/span> requires a checked exception to be handled by the process that calls it.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "Both methods are reflexive; comparing a <span class=\"dCode dNoWrap\">Path<\/span> with itself returns <span class=\"dCode dNoWrap\">true<\/span> for both.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "First off, the <span class=\"dCode dNoWrap\">Path.equals()<\/span> method checks if two <span class=\"dCode dNoWrap\">Path<\/span> values are equal, whereas the <span class=\"dCode dNoWrap\">Files.isSameFiles()<\/span> method determines if two <span class=\"dCode dNoWrap\">Path<\/span> values locate the same file in the file system. Since these are different processes, A is incorrect. Next, <span class=\"dCode dNoWrap\">Path.equals()<\/span> does not check if either file exists, so B is incorrect. The <span class=\"dCode dNoWrap\">Files.isSameFiles()<\/span> method first checks if their <span class=\"dCode dNoWrap\">Path<\/span> values are equal in terms of <span class=\"dCode dNoWrap\">equals()<\/span> and, if so, returns <span class=\"dCode dNoWrap\">true<\/span> without checking if they exist. Therefore, it is possible for <span class=\"dCode dNoWrap\">Files.isSameFile()<\/span> to return <span class=\"dCode dNoWrap\">true<\/span> even if the files do not exist, and C is incorrect. Between the two methods, only <span class=\"dCode dNoWrap\">Files.isSameFile()<\/span> throws a checked exception, so D is incorrect and E is correct. Finally, both methods are reflexive, since comparing a <span class=\"dCode dNoWrap\">Path<\/span> value with itself returns <span class=\"dCode dNoWrap\">true<\/span> for both, and F is correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34473",
      "attempts_id": "392270",
      "question_id": "34473",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of executing the following application? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">import&#160;java.util.concurrent.*;<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;SaladBarTracker&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;await(CyclicBarrier&#160;cb)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;try&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cb.await();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}&#160;catch&#160;(InterruptedException&#160;|&#160;BrokenBarrierException&#160;e)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\/\/&#160;Handle&#160;exception<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;CyclicBarrier&#160;cb&#160;=&#160;new&#160;CyclicBarrier(4,<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;()&#160;-&#62;&#160;System.out.println(\"Salad&#160;bar&#160;empty\"));&#160;\/\/&#160;r1<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;ExecutorService&#160;service&#160;=&#160;Executors.newFixedThreadPool(4);&#160;\/\/&#160;r2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;for(int&#160;i=0;&#160;i&#60;12;&#160;i++)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;service.submit(()&#160;-&#62;&#160;await(cb));&#160;\/\/&#160;r3<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;service.shutdown();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">Salad&#160;bar&#160;empty<\/span> exactly once.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">Salad&#160;bar&#160;empty<\/span> multiple times.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">r1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">r2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">r3<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but waits forever at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles without issue, so C, D, and E are incorrect. The limit of the cyclic barrier is <span class=\"dCode dNoWrap\">4<\/span>, and since we are sending 12 tasks to it, it is activated a total of three times. Therefore, B is the correct answer, and A, F, and G are incorrect. Note that the thread pool is also <span class=\"dCode dNoWrap\">4<\/span>, which means that we have just enough threads to break the barrier. For example, if our thread pool was <span class=\"dCode dNoWrap\">3<\/span>, then the barrier would never be reached and G would be the correct answer.",
        "display_order": "1"
      }]
    }, {
      "id": "34475",
      "attempts_id": "392270",
      "question_id": "34475",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "4;5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following can be inserted to override the superclass method? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;LearnToWalk&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;void&#160;toddle()&#160;{}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;class&#160;BabyRhino&#160;extends&#160;LearnToWalk&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;\/\/&#160;INSERT&#160;CODE&#160;HERE<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">private&#160;void&#160;toddle()&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">protected&#160;void&#160;toddle(){}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">public&#160;int&#160;toddle()&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">public&#160;void&#160;toddle()&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">public&#160;void&#160;toddle()&#160;throws&#160;RuntimeException&#160;{}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">void&#160;toddle()&#160;{}<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "An override is not allowed to have a more restrictive access control than the original method. A, B, and F are incorrect for this reason. C is incorrect because the return type is different. Runtime exceptions may be added to the method signature, making E correct. E is a straightforward override.",
        "display_order": "1"
      }]
    }, {
      "id": "34443",
      "attempts_id": "392270",
      "question_id": "34443",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "1",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of this program?<br><br><span class=\"dCode dNoWrap\">1:&#160;&#160;&#160;&#160;public&#160;class&#160;PokerHand&#160;{<\/span><br><span class=\"dCode dNoWrap\">2:&#160;&#160;&#160;&#160;&#160;&#160;&#160;public&#160;void&#160;play()&#160;{<\/span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int&#160;numberOfPlayers&#160;=&#160;6;<\/span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;class&#160;Dealer&#160;{<\/span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public&#160;void&#160;deal()&#160;{<\/span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for&#160;(int&#160;i&#160;=&#160;1;&#160;i&#160;&#60;=&#160;numberOfPlayers;&#160;i++)<\/span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.<i>out<\/i>.print(i);<\/span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">9:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">10:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Dealer&#160;dealer&#160;=&#160;new&#160;Dealer();<\/span><br><span class=\"dCode dNoWrap\">11:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dealer.deal();<\/span><br><span class=\"dCode dNoWrap\">12:&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">13:&#160;&#160;&#160;&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">14:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PokerHand&#160;hand&#160;=&#160;new&#160;PokerHand();<\/span><br><span class=\"dCode dNoWrap\">15:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hand.play();<\/span><br><span class=\"dCode dNoWrap\">16:&#160;&#160;&#160;&#160;&#160;}&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">123456<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "A compiler error occurs on line 4.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "A compiler error occurs on line 6.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "A compiler error occurs on line 10.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "A compiler error occurs on a different line.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "This code is fine in Java 8. In Java 7, it would have produced a compiler error on line 6 because <span class=\"dCode dNoWrap\">numberOfPlayers<\/span> is not final. Since effectively final is good enough in Java 8, the code compiles.",
        "display_order": "1"
      }]
    }, {
      "id": "34455",
      "attempts_id": "392270",
      "question_id": "34455",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Suppose that you have a table with three rows. The names in those rows are Anna, Betty, and Cat. What does the following output?<br><br><span class=\"dSmall\"><span class=\"dCode dNoWrap\">String&#160;sql&#160;=&#160;\"select&#160;name&#160;from&#160;animal&#160;order&#160;by&#160;name\";<br\/>try&#160;(Connection&#160;conn&#160;=&#160;DriverManager.getConnection(\"jdbc:derby:zoo\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;Statement&#160;stmt&#160;=&#160;conn.createStatement(<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ResultSet.TYPE_SCROLL_INSENSITIVE,&#160;ResultSet.CONCUR_READ_ONLY);<\/span><br><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;ResultSet&#160;rs&#160;=&#160;stmt.executeQuery(sql))&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.next();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.previous();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.previous();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.next();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.next();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;rs.absolute(2);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;System.out.println(rs.getString(1));<\/span><br><span class=\"dCode dNoWrap\">}<\/span><\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Anna<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Betty<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Cat<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "A <span class=\"dCode dNoWrap\">SQLException<\/span> is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "All of the <span class=\"dCode dNoWrap\">next()<\/span> and <span class=\"dCode dNoWrap\">previous()<\/span> calls don't matter. Even though the second <span class=\"dCode dNoWrap\">previous()<\/span> call points the cursor to an invalid row, it just returns <span class=\"dCode dNoWrap\">false<\/span> and doesn't throw an exception. The call to <span class=\"dCode dNoWrap\">absolute()<\/span> repositions the cursor at row 2, which is <span class=\"dCode dNoWrap\">Betty<\/span>. Therefore, choice B is correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34437",
      "attempts_id": "392270",
      "question_id": "34437",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of the following code?<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;WhichAnimal&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;enum&#160;AnimalsInPark&#160;{<\/span><br><span class=\"dCode dNoWrap\"><i>&#160;&#160;&#160;&#160;&#160;&#160;SQUIRREL<\/i>,&#160;<i>CHIPMUNK<\/i>,&#160;<i>SPARROW<\/i><\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;AnimalsInPark&#160;a&#160;=&#160;AnimalsInPark.<i>CHIPMUNK&#160;<\/i>;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;switch&#160;(a)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case&#160;AnimalsInPark.<i>SQUIRREL<\/i>:&#160;System.<i>out<\/i>.print(\"S\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case&#160;AnimalsInPark.<i>CHIPMUNK&#160;<\/i>:&#160;System.<i>out<\/i>.print(\"C\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;default:&#160;System.<i>out<\/i>.print(\"P\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}&#160;}&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">C<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">CP<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The <span class=\"dCode dNoWrap\">enum<\/span> doesn't compile.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The <span class=\"dCode dNoWrap\">main<\/span> method doesn't compile.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The <span class=\"dCode dNoWrap\">enum<\/span> is correct. The semicolon at the end is optional when the only thing in the <span class=\"dCode dNoWrap\">enum<\/span> is the values. The <span class=\"dCode dNoWrap\">switch<\/span> statement is not correct. The case must contain the type without the name of the <span class=\"dCode dNoWrap\">enum<\/span>. <span class=\"dCode dNoWrap\">case<\/span> <span class=\"dCode dNoWrap\">SQUIRREL<\/span> would compile.",
        "display_order": "1"
      }]
    }, {
      "id": "34429",
      "attempts_id": "392270",
      "question_id": "34429",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which are true statements about the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Numbers&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;int&#160;num;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;Numbers(int&#160;n)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;num&#160;=&#160;n;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;int&#160;compareTo(Numbers&#160;n)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;return&#160;num&#160;&#8211;&#160;n.num;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;Numbers&#160;x&#160;=&#160;new&#160;Numbers(____);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;Numbers&#160;y&#160;=&#160;new&#160;Numbers(____);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;List&#60;Numbers&#62;&#160;list&#160;=&#160;new&#160;ArrayList&#60;Numbers&#62;();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "If <span class=\"dCode dNoWrap\">x.compareTo(y)<\/span> returns <span class=\"dCode dNoWrap\">0<\/span>, the numbers passed to the constructors are guaranteed to have been the same.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "If <span class=\"dCode dNoWrap\">x.compareTo(y)<\/span> returns <span class=\"dCode dNoWrap\">1<\/span>, the numbers passed to the constructors are guaranteed to have been the same.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "If <span class=\"dCode dNoWrap\">x.compareTo(y)<\/span> returns <span class=\"dCode dNoWrap\">-1<\/span>, the number passed to <span class=\"dCode dNoWrap\">x<\/span>'s constructor is guaranteed to have been larger than the number passed to <span class=\"dCode dNoWrap\">y<\/span>'s constructor.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "If <span class=\"dCode dNoWrap\">x.compareTo(y)<\/span> returns <span class=\"dCode dNoWrap\">-1<\/span>, the number passed to <span class=\"dCode dNoWrap\">x<\/span>'s constructor is guaranteed to have been smaller than the number passed to <span class=\"dCode dNoWrap\">y<\/span>'s constructor.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "If <span class=\"dCode dNoWrap\">x<\/span> and <span class=\"dCode dNoWrap\">y<\/span> are added to <span class=\"dCode dNoWrap\">list<\/span>, <span class=\"dCode dNoWrap\">Collections.sort(list)<\/span> will properly sort them.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "This method follows the contract for a <span class=\"dCode dNoWrap\">compareTo()<\/span> method. It returns <span class=\"dCode dNoWrap\">0<\/span> when the objects are equal, a negative number when the object is smaller than the argument, and a positive number otherwise. However, this object does not implement the <span class=\"dCode dNoWrap\">Comparable<\/span> interface. <span class=\"dCode dNoWrap\">Collections.sort()<\/span> will not compile if called on this object.",
        "display_order": "1"
      }]
    }, {
      "id": "34462",
      "attempts_id": "392270",
      "question_id": "34462",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the value of <span class=\"dCode dNoWrap\">name<\/span> after an instance of <span class=\"dCode dNoWrap\">Whale<\/span> is serialized and then deserialized?<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Mammal&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;protected&#160;transient&#160;String&#160;name&#160;=&#160;\"Moby\";<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;void&#160;setName(String&#160;name)&#160;{&#160;this.name&#160;=&#160;name;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;String&#160;getName()&#160;{&#160;return&#160;name;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;Mammal()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;this.name&#160;=&#160;\"Monstro\";<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Whale&#160;extends&#160;Mammal&#160;implements&#160;Serializable&#160;{<\/span><br><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;{&#160;this.name&#160;=&#160;\"Lisa\";&#160;}<\/span><br><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;Whale()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;this.name&#160;=&#160;\"Roger\";<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Moby<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Monstro<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Lisa<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Roger<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">null<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "8",
        "data": [{
          "data_type_id": "2",
          "data": "The value may not be known until runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "First off, even though the <span class=\"dCode dNoWrap\">Whale<\/span> implements <span class=\"dCode dNoWrap\">Serializable<\/span>, it does not define a <span class=\"dCode dNoWrap\">static<\/span> <span class=\"dCode dNoWrap\">serialVersionUID<\/span> variable, which is recommended but not required; therefore, it compiles without issue and F is incorrect. The code also runs without issue, so G is incorrect. The key here is that Java will call the constructor for the first non-serializable no-argument parent class during deserialization, skipping any constructors and default initializations for serializable classes in between, including the <span class=\"dCode dNoWrap\">Whale<\/span> class itself. Therefore, <span class=\"dCode dNoWrap\">Lisa<\/span> and <span class=\"dCode dNoWrap\">Roger<\/span> are skipped and C and D are incorrect. Since <span class=\"dCode dNoWrap\">name<\/span> is marked <span class=\"dCode dNoWrap\">transient<\/span> in <span class=\"dCode dNoWrap\">Mammal<\/span>, <span class=\"dCode dNoWrap\">Moby<\/span> is discarded on serialization, and A is incorrect. The <span class=\"dCode dNoWrap\">Whale<\/span> class extends <span class=\"dCode dNoWrap\">Mammal<\/span> but is not marked <span class=\"dCode dNoWrap\">Serializable<\/span>, so the constructor is run during the deserialization process and the value is set to <span class=\"dCode dNoWrap\">Monstro<\/span>; therefore B is correct. Since a value for <span class=\"dCode dNoWrap\">name<\/span> is set on deserialization, E is incorrect. H is also incorrect, because the caller cannot change the serialized value of <span class=\"dCode dNoWrap\">name<\/span> with <span class=\"dCode dNoWrap\">setName()<\/span>, since <span class=\"dCode dNoWrap\">name<\/span> is marked <span class=\"dCode dNoWrap\">transient<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34431",
      "attempts_id": "392270",
      "question_id": "34431",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assuming that the file <span class=\"dCode dNoWrap\">\/own\/food\/nocturnal.png<\/span> exists within the file system, what is the result of executing the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">Path&#160;path&#160;=&#160;Paths.get(\"\/owl\/food\/nocturnal.png\").getParent();<\/span><br><br><span class=\"dCode dNoWrap\">Files.walk(path,&#160;5,&#160;FileVisitOption.FOLLOW_LINKS)&#160;&#160;\/\/&#160;b1<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(p&#160;-&#62;&#160;p.resolve(p).getFileName().toString().endsWith(\".txt\"))&#160;\/\/&#160;b2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(p&#160;-&#62;&#160;p.getNameCount(0)&#62;4)&#160;\/\/&#160;b3<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.forEach(p&#160;-&#62;&#160;System.out.println(p.toRealPath()));<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles but does not produce any output at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">b1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">b2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">b3<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The codes a list of file paths that end in <span class=\"dCode dNoWrap\">.txt<\/span> that have at least four components of their path.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code produces an infinite loop at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code does not compile because the method <span class=\"dCode dNoWrap\">Path.getNameCount()<\/span> does not take any arguments, so <span class=\"dCode dNoWrap\">b3<\/span> will not compile and D is correct. The rest of the lines are fine, since <span class=\"dCode dNoWrap\">Files.walk()<\/span> may take a length and file options argument for handling symbolic links. If line <span class=\"dCode dNoWrap\">b3<\/span> were corrected to remove the argument, then E would be correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34448",
      "attempts_id": "392270",
      "question_id": "34448",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which option fills in the blank to make this code compile?<br><br><span class=\"dCode dNoWrap\">Stream&#60;String&#62;&#160;s&#160;=&#160;Stream.of(\"bull\",&#160;\"cow\");<\/span><br><span class=\"dCode dNoWrap\">_____&#160;r=&#160;s.collect(Collectors.groupingBy(String::length));<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">List&#60;String&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Map&#60;Boolean,&#160;List&#60;String&#62;&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Map&#60;Integer,&#160;List&#60;String&#62;&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Map&#60;String,&#160;List&#60;String&#62;&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "None of the above",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The <span class=\"dCode dNoWrap\">groupingBy()<\/span> method groups by whatever type the mapping function returns. In this case, that is an <span class=\"dCode dNoWrap\">int<\/span>, which is autoboxed to an <span class=\"dCode dNoWrap\">Integer<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34447",
      "attempts_id": "392270",
      "question_id": "34447",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What command line would cause this program to fail on the assertion?<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;On&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;String&#160;s&#160;=&#160;null;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;assert&#160;s!=&#160;null;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">java&#160;&#8211;da&#160;On<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">java&#160;&#8211;ea&#160;On<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">java&#160;&#8211;Dda&#160;On<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">java&#160;&#8211;Dea&#160;On<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Java uses the flag <span class=\"dCode dNoWrap\">&#8211;ea<\/span> or <span class=\"dCode dNoWrap\">&#8211;enableassertions<\/span> to turn on assertions. B and C are incorrect because they represent system properties rather than assertion flags.",
        "display_order": "1"
      }]
    }, {
      "id": "34457",
      "attempts_id": "392270",
      "question_id": "34457",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the answer choices output the same as this traditional <span class=\"dCode dNoWrap\">for<\/span> loop? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">for&#160;(String&#160;s:&#160;strings)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;if&#160;(!s.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(s);<\/span><br><br>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">strings<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(p&#160;-&#62;&#160;p.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">strings<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(p&#160;-&#62;&#160;!&#160;p.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">strings.parallelStream()<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(p&#160;-&#62;&#160;p.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">strings.parallelStream()<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(p&#160;-&#62;&#160;!&#160;p.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">strings.stream()<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(p&#160;-&#62;&#160;p.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">strings.stream()<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(p&#160;-&#62;&#160;!&#160;p.equals(\"gecko\"))<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEach(System.out::println);<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Choices A and B do not compile because <span class=\"dCode dNoWrap\">filter()<\/span> is not defined directly for <span class=\"dCode dNoWrap\">Collections<\/span> interfaces. A <span class=\"dCode dNoWrap\">Stream<\/span> must be used. Choices C and E are incorrect because they use the wrong <span class=\"dCode dNoWrap\">Predicate<\/span> for filtering. The <span class=\"dCode dNoWrap\">filter()<\/span> method matches those that we want to keep in the stream. Choice D is incorrect because a parallel stream does not guarantee the order in which the results are printed. Therefore choice F is correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34430",
      "attempts_id": "392270",
      "question_id": "34430",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of the following statements?<br><br><span class=\"dCode dNoWrap\">Queue&#60;Integer&#62;&#160;q&#160;=&#160;new&#160;LinkedList&#60;&#62;();<\/span><br><span class=\"dCode dNoWrap\">q.add(new&#160;Integer(6));<\/span><br><span class=\"dCode dNoWrap\">q.add(new&#160;Integer(6));<\/span><br><span class=\"dCode dNoWrap\">System.out.println(q.size()&#160;+&#160;\"&#160;\"&#160;+&#160;q.contains(6L));<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">1&#160;false<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">1&#160;true<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2&#160;false<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">2&#160;true<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "A runtime exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "A queue can contain duplicate values. On line 7, Java uses autoboxing to convert the primitive to a <span class=\"dCode dNoWrap\">Long<\/span> object. Since the object in the queue is an <span class=\"dCode dNoWrap\">Integer<\/span> and not a <span class=\"dCode dNoWrap\">Long<\/span>, a match is not found.",
        "display_order": "1"
      }]
    }, {
      "id": "34426",
      "attempts_id": "392270",
      "question_id": "34426",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "3;4;5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What are some differences between an interface and an abstract class? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "Interfaces cannot be marked <span class=\"dCode dNoWrap\">abstract<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "Only abstract classes can declare <span class=\"dCode dNoWrap\">static<\/span> methods.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "Only interfaces can declare <span class=\"dCode dNoWrap\">default<\/span> methods.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "Only abstract classes can have <span class=\"dCode dNoWrap\">protected<\/span> variables.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "Only abstract classes can have non-<span class=\"dCode dNoWrap\">final<\/span> variables.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "Only interfaces can have <span class=\"dCode dNoWrap\">static<\/span> <span class=\"dCode dNoWrap\">final<\/span> variables.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "A is incorrect, because all interfaces are assumed <span class=\"dCode dNoWrap\">abstract<\/span>, even if they are not marked as such. B is incorrect, because <span class=\"dCode dNoWrap\">static<\/span> methods were added to interfaces in Java 8. C is correct, since the new <span class=\"dCode dNoWrap\">default<\/span> methods are only allowed for interfaces. D is correct, because interfaces can only have <span class=\"dCode dNoWrap\">public<\/span> variables. E is correct, since all variables in an interface are assumed <span class=\"dCode dNoWrap\">final<\/span>. F is incorrect, because both abstract classes and interfaces can have <span class=\"dCode dNoWrap\">static<\/span> <span class=\"dCode dNoWrap\">final<\/span> variables.",
        "display_order": "1"
      }]
    }, {
      "id": "34428",
      "attempts_id": "392270",
      "question_id": "34428",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assume that today is June 1, 2016. What is the result of the following?<br><br><span class=\"dCode dNoWrap\">Stream&#60;LocalDate&#62;&#160;s&#160;=&#160;Stream.of(LocalDate.now());<\/span><br><span class=\"dCode dNoWrap\">UnaryOperator&#60;LocalDate&#62;&#160;u&#160;=&#160;l&#160;-&#62;&#160;l.get(Calendar.DAY_OF_MONTH);<\/span><br><span class=\"dCode dNoWrap\">long&#160;result&#160;=&#160;s.filter(l&#160;-&#62;&#160;l&#160;!=&#160;null).map(u).count();<\/span><br><span class=\"dCode dNoWrap\">System.out.println(result);<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">0<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">1<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">5<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">6<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "An exception is thrown.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "A <span class=\"dCode dNoWrap\">UnaryOperator<\/span> returns the same type as it takes as a parameter. The one in this question takes a <span class=\"dCode dNoWrap\">LocalDate<\/span>, but it attempts to return an <span class=\"dCode dNoWrap\">int<\/span>. Since the types are different, the code doesn't compile.",
        "display_order": "1"
      }]
    }, {
      "id": "34450",
      "attempts_id": "392270",
      "question_id": "34450",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "3;4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assuming an implementation of the <span class=\"dCode dNoWrap\">calculateFuture()<\/span> method is provided prior to runtime, which of the following are possible results of executing the following application? (Choose all that apply.)<br><br><span class=\"dSmall\"><span class=\"dCode dNoWrap\">import&#160;java.util.*;<\/span><br><span class=\"dCode dNoWrap\">import&#160;java.util.concurrent.*;<\/span><br><span class=\"dCode dNoWrap\">import&#160;java.util.stream.*;<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;ZooPredictor&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;calculateFuture(int&#160;seed)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;\/\/&#160;IMPLEMENTATION&#160;OMITTED<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;seeFuture(Future&#60;?&#62;&#160;f)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;try&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(f.get(100,&#160;TimeUnit.DAYS));&#160;\/\/&#160;i1<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}&#160;catch&#160;(Exception&#160;e)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.println(\"Problem\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;throws&#160;InterruptedException,&#160;ExecutionException&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;ExecutorService&#160;service&#160;=&#160;Executors.newSingleThreadExecutor();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;final&#160;List&#60;Future&#60;?&#62;&#62;&#160;results&#160;=&#160;new&#160;ArrayList&#60;&#62;();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;IntStream.range(10,&#160;15)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEach(i&#160;-&#62;&#160;results.add(<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;service.submit(()&#160;-&#62;&#160;calculateFuture(i))));&#160;\/\/&#160;i2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;results.stream().forEach(f&#160;-&#62;&#160;seeFuture(f));<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;service.shutdown();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span><\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs a number five times.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs a <span class=\"dCode dNoWrap\">String<\/span> value five times.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs a <span class=\"dCode dNoWrap\">null<\/span> value five times.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">Problem<\/span> five times.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "It hangs indefinitely at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "It throws an unhandled exception at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">i1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "8",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">i2<\/span>.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles and runs without issue, so G and H are incorrect. The return type of <span class=\"dCode dNoWrap\">calculateFuture()<\/span> is <span class=\"dCode dNoWrap\">void<\/span>, so the <span class=\"dCode dNoWrap\">submit()<\/span> is interpreted as being applied to a <span class=\"dCode dNoWrap\">Runnable<\/span> value. In this manner, the <span class=\"dCode dNoWrap\">Future&#60;?&#62;<\/span> can only return <span class=\"dCode dNoWrap\">null<\/span> or throw an exception; therefore C and D are correct and A and B are incorrect. The <span class=\"dCode dNoWrap\">get()<\/span> method we used takes a parameter that will wait up to 100 days for a result. While this may seem like a lot of time, it is not the same as hanging indefinitely; therefore E is incorrect. Finally, any exception thrown in <span class=\"dCode dNoWrap\">calculateFuture()<\/span> will appear as an exception in the <span class=\"dCode dNoWrap\">get()<\/span> operation. Since the <span class=\"dCode dNoWrap\">get()<\/span> operations are caught in a <span class=\"dCode dNoWrap\">try\/catch<\/span> block in <span class=\"dCode dNoWrap\">seeFuture()<\/span>, none of them will be unhandled, and F is incorrect.",
        "display_order": "1"
      }]
    }, {
      "id": "34434",
      "attempts_id": "392270",
      "question_id": "34434",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Suppose that you are asked to write a program for a zoo. Every animal has a unique identifier. The customer says the most important thing is for the user to be able to look up the animal quickly based on that identifier. Animals are unique. Which collection type should you use in this scenario?",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">ArrayList<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">HashMap<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">HashSet<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">LinkedList<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TreeMap<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TreeSet<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Since the problem description talks about keys (ids) and values (animals), we know a <span class=\"dCode dNoWrap\">Map<\/span> is the right interface. This rules out choices A, C, D, and F. <span class=\"dCode dNoWrap\">HashMap<\/span> is better than <span class=\"dCode dNoWrap\">TreeMap<\/span> in this scenario because lookup speed is important and sort order was not mentioned.",
        "display_order": "1"
      }]
    }, {
      "id": "34479",
      "attempts_id": "392270",
      "question_id": "34479",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which are true about the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">1:&#160;&#160;&#160;&#160;public&#160;enum&#160;Suit&#160;{<\/span><br><span class=\"dCode dNoWrap\">2:&#160;&#160;&#160;&#160;&#160;&#160;&#160;<i>SPADE<\/i>(Color.<i>BLACK<\/i>),&#160;<i>HEART<\/i>(Color.<i>RED<\/i>),&#160;<\/span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;&#160;&#160;&#160;&#160;&#160;<i>DIAMOND<\/i>(Color.<i>RED<\/i>),&#160;<i>CLUB<\/i>(Color.<i>BLACK<\/i>);<\/span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;&#160;&#160;&#160;private&#160;enum&#160;Color&#160;{&#160;<i>RED<\/i>,&#160;<i>BLACK<\/i>;&#160;}<\/span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;&#160;&#160;&#160;private&#160;Suit(Color&#160;c)&#160;{&#160;color&#160;=&#160;c;&#160;}<\/span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;&#160;&#160;&#160;public&#160;Color&#160;color;<\/span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The <span class=\"dCode dNoWrap\">Suit<\/span> <span class=\"dCode dNoWrap\">enum<\/span> compiles successfully.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "An <span class=\"dCode dNoWrap\">enum<\/span> cannot declare an inner <span class=\"dCode dNoWrap\">enum<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The constructor on line 5 cannot be changed to <span class=\"dCode dNoWrap\">public<\/span> or <span class=\"dCode dNoWrap\">protected<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Color.Black<\/span> can be replaced by <span class=\"dCode dNoWrap\">BLACK<\/span> on line 2.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The <span class=\"dCode dNoWrap\">Color<\/span> <span class=\"dCode dNoWrap\">enum<\/span> on line 4 must be declared <span class=\"dCode dNoWrap\">private<\/span>.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles. An <span class=\"dCode dNoWrap\">enum<\/span> is Java code, and it can contain other Java code including other <span class=\"dCode dNoWrap\">enum<\/span>s with any access modifier. <span class=\"dCode dNoWrap\">Enum<\/span> constructors are only allowed to be private because they cannot be created by callers. They must be referred to like constants. Since <span class=\"dCode dNoWrap\">Color<\/span> is an <span class=\"dCode dNoWrap\">enum<\/span>, the types must be referenced using their <span class=\"dCode dNoWrap\">enum<\/span> name.",
        "display_order": "1"
      }]
    }, {
      "id": "34472",
      "attempts_id": "392270",
      "question_id": "34472",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;4;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What statements about the following class definition are true? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;LandscapeTracker&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;private&#160;transient&#160;int&#160;flowers;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;int&#160;getFlowers()&#160;{&#160;return&#160;flowers;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;synchronized&#160;void&#160;addFlowers(int&#160;x)&#160;{&#160;\/\/&#160;q1<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;flowers&#160;+=&#160;x;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;void&#160;removeFlowers(int&#160;x)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;synchronized&#160;(this)&#160;{&#160;\/\/&#160;q2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;flowers&#160;-=&#160;x;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles without issue.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The <span class=\"dCode dNoWrap\">transient<\/span> modifier prevents the code from being accessed by multiple threads.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "This class implements the immutable object pattern.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The lock acquired on <span class=\"dCode dNoWrap\">q1<\/span> and <span class=\"dCode dNoWrap\">q2<\/span> is on the same object.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The class correctly prevents concurrency issues for the value of <span class=\"dCode dNoWrap\">flowers<\/span> when accessed by multiple threads.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The variable <span class=\"dCode dNoWrap\">flowers<\/span> would benefit from being changed to an <span class=\"dCode dNoWrap\">AtomicInteger<\/span>.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The class compiles without issue, so A is correct. The <span class=\"dCode dNoWrap\">transient<\/span> modifier is relevant only if a class object is serialized and does not influence concurrency, so B is incorrect. The class does not implement the immutable object pattern since its members are modifiable, so C is incorrect. D is correct, because the <span class=\"dCode dNoWrap\">synchronized<\/span> modifier on a non-static method is the same as manually synchronizing on <span class=\"dCode dNoWrap\">this<\/span>. E is incorrect, since the <span class=\"dCode dNoWrap\">getFlowers()<\/span> method is not <span class=\"dCode dNoWrap\">synchronized<\/span>. This allows a thread to call <span class=\"dCode dNoWrap\">getFlowers()<\/span> while another thread is modifying the data, possibly seeing an incomplete, thread-local state. Finally, F is correct, because the value <span class=\"dCode dNoWrap\">flowers<\/span> is not fully protected from read\/write problems due to <span class=\"dCode dNoWrap\">getFlowers()<\/span> not being synchronized; therefore using an <span class=\"dCode dNoWrap\">AtomicInteger<\/span> would improve the code.",
        "display_order": "1"
      }]
    }, {
      "id": "34441",
      "attempts_id": "392270",
      "question_id": "34441",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "3;4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of executing the following application? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">import&#160;java.util.concurrent.*;<\/span><br><span class=\"dCode dNoWrap\">import&#160;java.util.stream.*;<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;PrintHolidays&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;ExecutorService&#160;service&#160;=&#160;Executors.newScheduledThreadPool(10);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;LongStream.of(101,704,1126)&#160;\/\/&#160;p1<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.forEach(()&#160;-&#62;&#160;service.submit(&#160;\/\/&#160;p2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c&#160;-&#62;&#160;System.out.println(2+c)));&#160;\/\/&#160;p3<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;service.submit(()&#160;-&#62;&#160;System.out.println(\"Happy&#160;Holidays!\"));&#160;\/\/&#160;p4<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles and outputs the three numbers, followed by <span class=\"dCode dNoWrap\">Happy&#160;Holidays!<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">p1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">p2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">p3<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">p4<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but the output cannot be determined ahead of time.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "8",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but waits forever at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The application does not compile, so A, F, G, and H are incorrect. The problem is that the left side of the lambda expressions on lines <span class=\"dCode dNoWrap\">p2<\/span> and <span class=\"dCode dNoWrap\">p3<\/span> is incorrect. The <span class=\"dCode dNoWrap\">forEach()<\/span> method takes a <span class=\"dCode dNoWrap\">Consumer&#60;T&#62;<\/span>, so the lambda should have a generic argument on the left side on line <span class=\"dCode dNoWrap\">p2<\/span>; therefore line <span class=\"dCode dNoWrap\">p2<\/span> does not compile and C is correct. Likewise, the <span class=\"dCode dNoWrap\">submit()<\/span> method, while accepting both <span class=\"dCode dNoWrap\">Callable<\/span> and <span class=\"dCode dNoWrap\">Runnable<\/span> lambda expressions, does not accept lambda expressions that take an input argument; therefore line <span class=\"dCode dNoWrap\">p3<\/span> does not compile and D is also correct. Note that if the code were corrected to compile, it would also wait forever at runtime since the thread executor is never shut down, and H would be correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34483",
      "attempts_id": "392270",
      "question_id": "34483",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "3;4;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following can be inserted in <span class=\"dCode dNoWrap\">main<\/span>? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;static&#160;void&#160;call(Object&#160;obj)&#160;{&#160;}<\/span><br><span class=\"dCode dNoWrap\">public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;\/\/&#160;INSERT&#160;CODE&#160;HERE<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\"><i>call<\/i>(new&#160;Runnable()&#160;{});<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\"><i>call<\/i>(new&#160;Runnable()&#160;{&#160;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;public&#160;void&#160;run()&#160;{&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;})<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\"><i>call<\/i>(new&#160;Runnable()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;public&#160;void&#160;run()&#160;{&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;});<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\"><i>call<\/i>(new&#160;Thread()&#160;{&#160;});<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\"><i>call<\/i>(new&#160;Thread()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;public&#160;void&#160;run()&#160;{&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;})<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">call(new&#160;Thread()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;public&#160;void&#160;run()&#160;{&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;});<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "An anonymous inner class can either extend a class or implement an interface. <span class=\"dCode dNoWrap\">Runnable<\/span> is an interface with one method. A is incorrect because it does not implement the interface. <span class=\"dCode dNoWrap\">Thread<\/span> is a concrete class, making implementing the <span class=\"dCode dNoWrap\">run()<\/span> method optional. B and E are incorrect because they are missing the semicolon at the end of <span class=\"dCode dNoWrap\">call()<\/span>.",
        "display_order": "1"
      }]
    }, {
      "id": "34440",
      "attempts_id": "392270",
      "question_id": "34440",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "2",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following can fill in the blanks in order to make this code compile?<br><br><span class=\"dCode dNoWrap\">__________&#160;a&#160;=&#160;_________.getConnection(url,&#160;userName,&#160;password);<\/span><br><span class=\"dCode dNoWrap\">__________&#160;b&#160;=&#160;a.createStatement();<\/span><br><span class=\"dCode dNoWrap\">__________&#160;c&#160;=&#160;b.executeQuery(sql);<\/span><br><span class=\"dCode dNoWrap\">if&#160;(c.next())&#160;System.out.println(c.getString(1));<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Connection<\/span>, <span class=\"dCode dNoWrap\">Driver<\/span>, <span class=\"dCode dNoWrap\">Statement<\/span>, <span class=\"dCode dNoWrap\">ResultSet<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Connection<\/span>, <span class=\"dCode dNoWrap\">DriverManager<\/span>, <span class=\"dCode dNoWrap\">Statement<\/span>, <span class=\"dCode dNoWrap\">ResultSet<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Connection<\/span>, <span class=\"dCode dNoWrap\">DataSource<\/span>, <span class=\"dCode dNoWrap\">Statement<\/span>, <span class=\"dCode dNoWrap\">ResultSet<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Driver<\/span>, <span class=\"dCode dNoWrap\">Connection<\/span>, <span class=\"dCode dNoWrap\">Statement<\/span>, <span class=\"dCode dNoWrap\">ResultSet<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">DriverManager<\/span>, <span class=\"dCode dNoWrap\">Connection<\/span>, <span class=\"dCode dNoWrap\">Statement<\/span>, <span class=\"dCode dNoWrap\">ResultSet<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">DataSource<\/span>, <span class=\"dCode dNoWrap\">Connection<\/span>, <span class=\"dCode dNoWrap\">Statement<\/span>, <span class=\"dCode dNoWrap\">ResultSet<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">DataSource<\/span> isn't on the exam, so any question containing one is wrong. The key variables used in running a query are <span class=\"dCode dNoWrap\">Connection<\/span>, <span class=\"dCode dNoWrap\">Statement<\/span>, and <span class=\"dCode dNoWrap\">ResultSet<\/span>. A <span class=\"dCode dNoWrap\">Connection<\/span> is obtained through a <span class=\"dCode dNoWrap\">DriverManager<\/span>, making choice B correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34478",
      "attempts_id": "392270",
      "question_id": "34478",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;5;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which statements are true about the following code? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Fins&#160;{}<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Gills&#160;{}<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Fish&#160;{&#160;public&#160;Fins&#160;fins;&#160;}<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Trout&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;Fish&#160;fish;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;Gills&#160;gills;<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Fish<\/span> has-a <span class=\"dCode dNoWrap\">Fins<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Trout<\/span> has-a <span class=\"dCode dNoWrap\">Fins<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Trout<\/span> is-a <span class=\"dCode dNoWrap\">Fish<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Fish<\/span> is-a <span class=\"dCode dNoWrap\">Trout<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Trout<\/span> has-a <span class=\"dCode dNoWrap\">Fish<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Trout<\/span> has-a <span class=\"dCode dNoWrap\">gills<\/span>.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "One thing to note is that <span class=\"dCode dNoWrap\">Trout<\/span> does not inherit from <span class=\"dCode dNoWrap\">Fish<\/span>, so <span class=\"dCode dNoWrap\">Trout<\/span> is not a <span class=\"dCode dNoWrap\">Fish<\/span> nor does <span class=\"dCode dNoWrap\">Trout<\/span> inherit the <span class=\"dCode dNoWrap\">Fins<\/span> object, so B and C are incorrect. A is correct, because <span class=\"dCode dNoWrap\">Fish<\/span> has a reference to <span class=\"dCode dNoWrap\">Fins<\/span>. D is incorrect, since the classes are not related in this way. E and F are correct, because <span class=\"dCode dNoWrap\">Trout<\/span> has references to both <span class=\"dCode dNoWrap\">Fish<\/span> and <span class=\"dCode dNoWrap\">Gills<\/span> objects.",
        "display_order": "1"
      }]
    }, {
      "id": "34436",
      "attempts_id": "392270",
      "question_id": "34436",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;4;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following stream classes are low level? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">PrintStream<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">FileInputStream<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">ObjectOutputStream<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">FileReader<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">PrintReader<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">FileWriter<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">InputStream<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">FileInputStream<\/span>, <span class=\"dCode dNoWrap\">FileReader<\/span>, and <span class=\"dCode dNoWrap\">FileWriter<\/span> all perform operations on files directly, and they are considered low-level streams, so B, D, and F are correct. <span class=\"dCode dNoWrap\">PrintStream<\/span> is a high-level stream for writing character data to a byte stream, so A is incorrect. <span class=\"dCode dNoWrap\">ObjectOutputStream<\/span> is a high-level stream that serializes a low-level stream, so C is incorrect. <span class=\"dCode dNoWrap\">PrintReader<\/span> is not a <span class=\"dCode dNoWrap\">java.io<\/span> class, so E is incorrect. Finally, <span class=\"dCode dNoWrap\">InputStream<\/span> is an <span class=\"dCode dNoWrap\">abstract<\/span> parent class, and it is neither high level nor low level, so G is incorrect.",
        "display_order": "1"
      }]
    }, {
      "id": "34435",
      "attempts_id": "392270",
      "question_id": "34435",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which class is used to represent a directory in <span class=\"dCode dNoWrap\">java.io<\/span>?",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Dir<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Directory<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">File<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Files<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Path<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "In the <span class=\"dCode dNoWrap\">java.io<\/span> API, both files and directories are represented with the <span class=\"dCode dNoWrap\">File<\/span> class. <span class=\"dCode dNoWrap\">Path<\/span> can represent a directory in NIO.2, although the question specifically asks about the <span class=\"dCode dNoWrap\">java.io<\/span> API.",
        "display_order": "1"
      }]
    }, {
      "id": "34466",
      "attempts_id": "392270",
      "question_id": "34466",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following?<br><br><span class=\"dCode dNoWrap\">public&#160;class&#160;SnowStorm&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;static&#160;class&#160;Walk&#160;implements&#160;AutoCloseable&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;void&#160;close()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;throw&#160;new&#160;RuntimeException(\"snow\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span><br><span class=\"dCode dNoWrap\">public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;try&#160;(Walk&#160;walk1&#160;=&#160;new&#160;Walk();&#160;Walk&#160;walk2&#160;=&#160;new&#160;Walk();)&#160;{<\/span><br><span class=\"dCode dNoWrap\">}&#160;catch(Exception&#160;e)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;System.out.println(e.getMessage()<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;+&#160;\"&#160;\"&#160;+&#160;e.getSuppressed().length);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;}&#160;}&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rain&#160;0<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rain&#160;1<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">rain&#160;2<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">show&#160;0<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">snow&#160;1<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">snow&#160;2<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The first resource to be closed throws an exception, creating the primary exception. Then a suppressed exception is added to it when trying to close the other one.",
        "display_order": "1"
      }]
    }, {
      "id": "34458",
      "attempts_id": "392270",
      "question_id": "34458",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which line is the first with a compiler error?<br><br><span class=\"dCode dNoWrap\">List&#160;letters&#160;=&#160;Arrays.asList('a',&#160;'b',&#160;'c');<\/span><br><span class=\"dCode dNoWrap\">letters.stream()&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\/\/&#160;c1<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.sorted()&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\/\/&#160;c2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.distinct()&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\/\/&#160;c3<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.forEach(System.out::println)&#160;&#160;\/\/&#160;c4<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.sorted();&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\/\/&#160;c5<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">c1<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">c2<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">c3<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">c4<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">c5<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "None of the above. The code compiles.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "<span class=\"dCode dNoWrap\">sorted()<\/span> is an intermediate operator. It cannot be called after <span class=\"dCode dNoWrap\">forEach()<\/span>, which is a terminal operation. Therefore, <span class=\"dCode dNoWrap\">c5<\/span> does not compile. All code before that compiles.",
        "display_order": "1"
      }]
    }, {
      "id": "34464",
      "attempts_id": "392270",
      "question_id": "34464",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;3;5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What are some ways a developer can ensure that there is at most one instance of a class within an application using the singleton pattern? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "Add a <span class=\"dCode dNoWrap\">public&#160;static&#160;getInstance()<\/span> method to the class.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "Mark the singleton object <span class=\"dCode dNoWrap\">final<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "Mark all constructors <span class=\"dCode dNoWrap\">private<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "Name the singleton object <span class=\"dCode dNoWrap\">instance<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "Add <span class=\"dCode dNoWrap\">synchronized<\/span> to any method declaration that creates the singleton.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "A is incorrect, because having the <span class=\"dCode dNoWrap\">public&#160;static<\/span> method <span class=\"dCode dNoWrap\">getInstance()<\/span> does not ensure that only one instance of the singleton is created. B is correct, because marking the object <span class=\"dCode dNoWrap\">final<\/span> ensures that it is initialized once when the class is loaded. C is also correct, since having only <span class=\"dCode dNoWrap\">private<\/span> constructors ensures that no other class can create instances of the singleton class. D is incorrect, because the naming of the singleton object does not ensure that there is only one version. E is correct, and it is used with singletons that create their objects via lazy instantiation.",
        "display_order": "1"
      }]
    }, {
      "id": "34433",
      "attempts_id": "392270",
      "question_id": "34433",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is true about the following code snippet? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">String&#160;line;<\/span><br><span class=\"dCode dNoWrap\">Console&#160;c&#160;=&#160;System.console();<\/span><br><span class=\"dCode dNoWrap\">Writer&#160;w&#160;=&#160;c.writer();<\/span><br><span class=\"dCode dNoWrap\">if&#160;((line&#160;=&#160;c.read())&#160;!=&#160;null)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;w.append(line);<\/span><br><span class=\"dCode dNoWrap\">w.flush();<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The code runs without error but prints nothing.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code prints what the user entered.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "An <span class=\"dCode dNoWrap\">ArrayIndexOutOfBoundsException<\/span> might be thrown.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "A <span class=\"dCode dNoWrap\">NullPointerException<\/span> might be thrown.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "An <span class=\"dCode dNoWrap\">IOException<\/span> might be thrown.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "There is no <span class=\"dCode dNoWrap\">read()<\/span> method in the <span class=\"dCode dNoWrap\">Console<\/span> class; therefore the code does not compile, and F is correct. If the method were changed to <span class=\"dCode dNoWrap\">readLine()<\/span>, it would compile and run without issue, with B as the correct answer.",
        "display_order": "1"
      }]
    }, {
      "id": "34432",
      "attempts_id": "392270",
      "question_id": "34432",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Assuming that the current directory is <span class=\"dCode dNoWrap\">\/mammals<\/span> and the directories and files referenced by the program exist, what is true about the following code snippet? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">Path&#160;path&#160;=&#160;Paths.get(\"bear\/polar\/.\/environment\").normalize().getRoot();&#160;\/\/&#160;w1<\/span><br><span class=\"dCode dNoWrap\">System.out.println(Files.list(path)<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.filter(p&#160;-&#62;&#160;!Files.isDirectory(p))&#160;\/\/&#160;w2<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.map(p&#160;-&#62;&#160;p)&#160;\/\/&#160;w3<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.collect(Collectors.toSet())<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;.size());<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">w1<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">w2<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile because of line <span class=\"dCode dNoWrap\">w3<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "The code prints the number of unique files in a directory.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code prints the number of unique files in a directory tree.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "The code compiles without issue but throws an exception at runtime.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The code compiles without issue, so A, B, and C are incorrect. The code is not without error, though. The path on the first line is relative, and calling <span class=\"dCode dNoWrap\">normalize()<\/span> on it does not change this property. Therefore, since calling <span class=\"dCode dNoWrap\">getRoot()<\/span> on any relative path will result in a <span class=\"dCode dNoWrap\">null<\/span> value, the code will throw a <span class=\"dCode dNoWrap\">NullPointerException<\/span> on the second line, so F is correct, and D and E are incorrect.",
        "display_order": "1"
      }]
    }, {
      "id": "34452",
      "attempts_id": "392270",
      "question_id": "34452",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;3",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following calls of this method compile? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;static&#160;&#60;T&#160;extends&#160;Set&#62;&#160;T&#160;work(T&#160;t)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;return&#160;t;<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">HashSet&#160;set&#160;=&#160;work(new&#160;HashSet());<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">ArrayDeque&#160;set&#160;=&#160;work(new&#160;ArrayDeque&#160;());<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Set&#160;set&#160;=&#160;work(new&#160;HashSet());<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Set&#160;set&#160;=&#160;work(new&#160;ArrayDeque&#160;());<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Set&#160;set&#160;=&#160;work(new&#160;Set());<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The method specifies that <span class=\"dCode dNoWrap\">T<\/span> can be <span class=\"dCode dNoWrap\">Set<\/span> or any implementation of <span class=\"dCode dNoWrap\">Set<\/span>. <span class=\"dCode dNoWrap\">HashSet<\/span> and <span class=\"dCode dNoWrap\">TreeSet<\/span> are implementations of <span class=\"dCode dNoWrap\">Set<\/span>. The result can be stored in the type passed in or a more general type like <span class=\"dCode dNoWrap\">Set<\/span>. B and D are incorrect because <span class=\"dCode dNoWrap\">ArrayDeque<\/span> is not a <span class=\"dCode dNoWrap\">Set<\/span>. E is incorrect because <span class=\"dCode dNoWrap\">Set<\/span> is an interface and cannot be instantiated.",
        "display_order": "1"
      }]
    }, {
      "id": "34427",
      "attempts_id": "392270",
      "question_id": "34427",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "2;4;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following statements can be inserted in the blank so that the code will compile successfully? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">public&#160;interface&#160;WalksOn4Legs&#160;{}<\/span><br><span class=\"dCode dNoWrap\">public&#160;abstract&#160;class&#160;Mammal&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;int&#160;numberOfOffspring;<\/span><br><span class=\"dCode dNoWrap\">}<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;Antelope&#160;extends&#160;Mammal&#160;implements&#160;WalksOn4Legs&#160;{}<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;ParkRanger&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;void&#160;noteNewOffspring(Mammal&#160;mammal)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;mammal.numberOfOffspring++;<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;new&#160;ParkRanger().noteNewOffspring(___________);<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}<\/span><br><span class=\"dCode dNoWrap\">}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">new&#160;Mammal()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">new&#160;Antelope()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">new&#160;WalksOn4Legs()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">(Mammal)new&#160;Object()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">(Mammal)new&#160;String()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">null<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "A is incorrect, since <span class=\"dCode dNoWrap\">Mammal<\/span> is declared abstract and cannot be instantiated. Likewise, <span class=\"dCode dNoWrap\">WalkOn4Legs<\/span> is an interface, which is inherently abstract; therefore, C is incorrect. B is correct since <span class=\"dCode dNoWrap\">Antelope<\/span> is a subclass of <span class=\"dCode dNoWrap\">Mammal<\/span> and, as a polymorphic parameter, it can be passed without issue to a method accepting a reference of type <span class=\"dCode dNoWrap\">Mammal<\/span>. D is correct, since <span class=\"dCode dNoWrap\">Object<\/span> is a superclass of <span class=\"dCode dNoWrap\">Mammal<\/span> and the compiler allows the cast, even though this would produce a <span class=\"dCode dNoWrap\">ClassCastException<\/span> at runtime. E is incorrect, since <span class=\"dCode dNoWrap\">String<\/span> is not a superclass of <span class=\"dCode dNoWrap\">Mammal<\/span> and the compiler detects this and throws a compilation error. Finally, F is correct&#8212;a <span class=\"dCode dNoWrap\">null<\/span> value can always be passed as a reference. Although this will compile without issue, it will produce a <span class=\"dCode dNoWrap\">NullPointerException<\/span> at runtime.",
        "display_order": "1"
      }]
    }, {
      "id": "34474",
      "attempts_id": "392270",
      "question_id": "34474",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "5;6",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which functional interfaces can fill in the blanks to make the code compile? (Choose all that apply.)<br><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;public&#160;void&#160;doubles(______&#160;x,&#160;________&#160;y)&#160;{<\/span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;&#160;&#160;&#160;double&#160;d1&#160;=&#160;x.applyAsDouble(\"\");<\/span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;&#160;&#160;&#160;double&#160;d2&#160;=&#160;y.applyAsDouble(1L);<\/span><br><span class=\"dCode dNoWrap\">8:&#160;&#160;&#160;&#160;&#160;&#160;&#160;z.accept(1.0);<\/span><br><span class=\"dCode dNoWrap\">9:&#160;&#160;&#160;&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Consumer&#60;Double&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">DoubleConsumer<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Function&#60;Long,&#160;Double&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Function&#60;String,&#160;Double&#62;<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">LongToDoubleFunction<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">ToDoubleFunction&#60;String&#62;<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Choices A and B are incorrect because a consumer has a <span class=\"dCode dNoWrap\">void<\/span> return type and the example assigns the result to a variable. Lines 6 and 7 both call the method <span class=\"dCode dNoWrap\">applyAsDouble()<\/span> rather than <span class=\"dCode dNoWrap\">apply()<\/span>. This tells us that the answer is a primitive functional interface, ruling out choices C and D. The primitive versions are correct with choices E and F. Line 8 calls <span class=\"dCode dNoWrap\">accept()<\/span>, making it a consumer.",
        "display_order": "1"
      }]
    }, {
      "id": "34481",
      "attempts_id": "392270",
      "question_id": "34481",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "5",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the result of calling the following method?<br><br><span class=\"dSmall\"><span class=\"dCode dNoWrap\">2:&#160;public&#160;static&#160;void&#160;updateRecords(Deque&#60;Integer&#62;&#160;deque)&#160;throws&#160;InterruptedException&#160;{<\/span><br><span class=\"dCode dNoWrap\">3:&#160;&#160;&#160;&#160;deque.offerLast(9,&#160;4,&#160;TimeUnit.DAYS);<\/span><br><span class=\"dCode dNoWrap\">4:&#160;&#160;&#160;&#160;deque.offerFirst(8,&#160;21,&#160;TimeUnit.MICROSECONDS);<\/span><br><span class=\"dCode dNoWrap\">5:&#160;&#160;&#160;&#160;deque.offer(3);<\/span><br><span class=\"dCode dNoWrap\">6:&#160;&#160;&#160;&#160;System.out.print(deque.pollFirst(3,&#160;TimeUnit.MILLISECONDS));<\/span><br><span class=\"dCode dNoWrap\">7:&#160;&#160;&#160;&#160;System.out.print(\"&#160;\"+deque.pollLast(1,&#160;TimeUnit.SECONDS));<\/span><br><span class=\"dCode dNoWrap\">8:&#160;}<\/span><\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">8&#160;9<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">3&#160;9<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">8&#160;3<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "It outputs <span class=\"dCode dNoWrap\">3&#160;8<\/span>.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "The code will not compile.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "It compiles but throws an exception at runtime.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The output cannot be determined ahead of time.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The methods on lines 3, 4, 6, and 7 can be performed on a <span class=\"dCode dNoWrap\">BlockingDeque<\/span> reference, not a <span class=\"dCode dNoWrap\">Deque<\/span> reference; therefore the code will not compile and E is the correct answer. If the method signature were corrected to take a <span class=\"dCode dNoWrap\">BlockingDeque<\/span> instead of a <span class=\"dCode dNoWrap\">Deque<\/span>, then the answer would be G, because the <span class=\"dCode dNoWrap\">Deque<\/span> may be blocked at runtime when the <span class=\"dCode dNoWrap\">offerFirst()<\/span>, <span class=\"dCode dNoWrap\">offerLast()<\/span>, <span class=\"dCode dNoWrap\">pollFirst()<\/span>, and <span class=\"dCode dNoWrap\">pollLast()<\/span> operations are called. Finally, if they were not blocked and there were no other operations on the <span class=\"dCode dNoWrap\">Deque<\/span>, then the output would be <span class=\"dCode dNoWrap\">8&#160;3<\/span>, and C would be correct.",
        "display_order": "1"
      }]
    }, {
      "id": "34445",
      "attempts_id": "392270",
      "question_id": "34445",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mmcq",
      "answer": "1;3;4",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "Which of the following are valid lambda expressions? (Choose all that apply.)",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">()&#160;-&#62;&#160;{return&#160;30;}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">a,d&#160;-&#62;&#160;d.quack()<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">(Duck&#160;d)&#160;-&#62;&#160;{int&#160;x=1;&#160;return&#160;d;}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">y&#160;-&#62;&#160;{return&#160;y;}<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">Wolf&#160;w&#160;-&#62;&#160;39<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">(h,&#160;Ocelot&#160;o)&#160;-&#62;&#160;41<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">(int&#160;m,&#160;int&#160;m)&#160;-&#62;&#160;41<\/span>",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "The first lambda expression is valid, taking no arguments and returning an <span class=\"dCode dNoWrap\">int<\/span> value, so A is correct. B is incorrect, because more than one parameter requires parentheses <span class=\"dCode dNoWrap\">()<\/span>. C is correct, since local variable <span class=\"dCode dNoWrap\">x<\/span> is defined but not used. D is also correct, since it defines a lambda that takes a parameter of an unspecified type and returns a value of the same data type. E is incorrect, because specifying the type <span class=\"dCode dNoWrap\">Wolf<\/span> requires the use of parentheses <span class=\"dCode dNoWrap\">()<\/span>. F is incorrect, because specifying the data type for one parameter in a lambda expression requires you to specify the data type for all parameters in the expression. In this case, <span class=\"dCode dNoWrap\">o<\/span> has a data type and <span class=\"dCode dNoWrap\">h<\/span> does not; therefore the expression is invalid. Finally, G is incorrect, since the parameter name <span class=\"dCode dNoWrap\">m<\/span> is used twice on the left side of the expression.",
        "display_order": "1"
      }]
    }, {
      "id": "34439",
      "attempts_id": "392270",
      "question_id": "34439",
      "user_answer": null,
      "notes": null,
      "is_bookmarked": "0",
      "is_correct": null,
      "time_spent": "0",
      "status": "0",
      "section_id": "996",
      "question_type_id": null,
      "question_type": "mcq",
      "answer": "7",
      "is_final": "0",
      "opt_start": "1",
      "correctAnserForDisplay": null,
      "difficulty_level": "Easy",
      "assessment_title": "Problem Solving",
      "learning_objective": "Arithmetic Operations with rational numbers",
      "suffix": null,
      "prefix": null,
      "direction": [],
      "questionData": [{
        "data_type_id": "2",
        "data": "What is the output of the following code?<br><br><span class=\"dCode dNoWrap\">import&#160;java.io.*;<\/span><br><span class=\"dCode dNoWrap\">public&#160;class&#160;AutocloseableFlow&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;static&#160;class&#160;Door{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;public&#160;void&#160;close()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(\"D\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;static&#160;class&#160;Window&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;public&#160;void&#160;close()&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(\"W\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;}&#160;}<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;public&#160;static&#160;void&#160;main(String[]&#160;args)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;try&#160;(Door&#160;d&#160;=&#160;new&#160;Door();&#160;Window&#160;w&#160;=&#160;new&#160;Window())&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(\"T\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;throw&#160;new&#160;RuntimeException();<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}&#160;catch&#160;(Exception&#160;e)&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(\"E\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}&#160;finally&#160;{<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;System.out.print(\"F\");<\/span><br><span class=\"dCode dNoWrap\">&#160;&#160;&#160;&#160;&#160;&#160;}&#160;}&#160;}<\/span>",
        "display_order": "1"
      }],
      "choiceData": [{
        "id": "1",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TWF<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "2",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TWDF<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "3",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TWDEF<\/span>",
          "display_order": "0"
        }]
      }, {
        "id": "4",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TWF<\/span> followed by an exception.",
          "display_order": "0"
        }]
      }, {
        "id": "5",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TWDF<\/span> followed by an exception.",
          "display_order": "0"
        }]
      }, {
        "id": "6",
        "data": [{
          "data_type_id": "2",
          "data": "<span class=\"dCode dNoWrap\">TWEF<\/span> followed by an exception.",
          "display_order": "0"
        }]
      }, {
        "id": "7",
        "data": [{
          "data_type_id": "2",
          "data": "The code does not compile.",
          "display_order": "0"
        }]
      }],
      "hints": [{
        "data_type_id": "2",
        "data": "Objects instantiated in a try-with-resources must implement <span class=\"dCode dNoWrap\">AutoCloseable<\/span> or <span class=\"dCode dNoWrap\">Closeable<\/span>.",
        "display_order": "1"
      }]
    }]
  }
}